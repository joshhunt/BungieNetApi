/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BungieNetApi.Client;
using BungieNetApi.Model;

namespace BungieNetApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupV2ApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GroupV2AbdicateFoundership (long founderIdNew, long groupId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GroupV2AbdicateFoundershipWithHttpInfo (long founderIdNew, long groupId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GroupV2AddOptionalConversation (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GroupV2AddOptionalConversationWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GroupV2ApproveAllPending (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GroupV2ApproveAllPendingWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GroupV2ApprovePending (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GroupV2ApprovePendingWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GroupV2ApprovePendingForList (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GroupV2ApprovePendingForListWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GroupV2BanMember (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GroupV2BanMemberWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GroupV2DenyAllPending (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GroupV2DenyAllPendingWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20027</returns>
        InlineResponse20027 GroupV2DenyPendingForList (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        ApiResponse<InlineResponse20027> GroupV2DenyPendingForListWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GroupV2EditClanBanner (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GroupV2EditClanBannerWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GroupV2EditFounderOptions (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GroupV2EditFounderOptionsWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GroupV2EditGroup (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GroupV2EditGroupWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GroupV2EditGroupMembership (long groupId, long membershipId, int membershipType, int memberType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GroupV2EditGroupMembershipWithHttpInfo (long groupId, long membershipId, int membershipType, int memberType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 GroupV2EditOptionalConversation (long conversationId, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> GroupV2EditOptionalConversationWithHttpInfo (long conversationId, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GroupV2GetAdminsAndFounderOfGroup (int currentpage, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GroupV2GetAdminsAndFounderOfGroupWithHttpInfo (int currentpage, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 GroupV2GetAvailableAvatars ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> GroupV2GetAvailableAvatarsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 GroupV2GetAvailableThemes ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> GroupV2GetAvailableThemesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>InlineResponse20025</returns>
        InlineResponse20025 GroupV2GetBannedMembersOfGroup (int currentpage, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        ApiResponse<InlineResponse20025> GroupV2GetBannedMembersOfGroupWithHttpInfo (int currentpage, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GroupV2GetGroup (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GroupV2GetGroupWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GroupV2GetGroupByName (string groupName, int groupType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GroupV2GetGroupByNameWithHttpInfo (string groupName, int groupType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type. The POST version.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20020</returns>
        InlineResponse20020 GroupV2GetGroupByNameV2 ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type. The POST version.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        ApiResponse<InlineResponse20020> GroupV2GetGroupByNameV2WithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>InlineResponse20021</returns>
        InlineResponse20021 GroupV2GetGroupOptionalConversations (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        ApiResponse<InlineResponse20021> GroupV2GetGroupOptionalConversationsWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20028</returns>
        InlineResponse20028 GroupV2GetGroupsForMember (int filter, int groupType, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        ApiResponse<InlineResponse20028> GroupV2GetGroupsForMemberWithHttpInfo (int filter, int groupType, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GroupV2GetInvitedIndividuals (int currentpage, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GroupV2GetInvitedIndividualsWithHttpInfo (int currentpage, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        InlineResponse20023 GroupV2GetMembersOfGroup (int currentpage, long groupId, int? memberType = default(int?), string nameSearch = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        ApiResponse<InlineResponse20023> GroupV2GetMembersOfGroupWithHttpInfo (int currentpage, long groupId, int? memberType = default(int?), string nameSearch = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        InlineResponse20026 GroupV2GetPendingMemberships (int currentpage, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        ApiResponse<InlineResponse20026> GroupV2GetPendingMembershipsWithHttpInfo (int currentpage, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20030</returns>
        InlineResponse20030 GroupV2GetPotentialGroupsForMember (int filter, int groupType, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        ApiResponse<InlineResponse20030> GroupV2GetPotentialGroupsForMemberWithHttpInfo (int filter, int groupType, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <returns>InlineResponse20018</returns>
        InlineResponse20018 GroupV2GetRecommendedGroups (int createDateRange, int groupType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        ApiResponse<InlineResponse20018> GroupV2GetRecommendedGroupsWithHttpInfo (int createDateRange, int groupType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 GroupV2GetUserClanInviteSetting (int mType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> GroupV2GetUserClanInviteSettingWithHttpInfo (int mType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        InlineResponse20019 GroupV2GroupSearch ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        ApiResponse<InlineResponse20019> GroupV2GroupSearchWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 GroupV2IndividualGroupInvite (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> GroupV2IndividualGroupInviteWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>InlineResponse20031</returns>
        InlineResponse20031 GroupV2IndividualGroupInviteCancel (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        ApiResponse<InlineResponse20031> GroupV2IndividualGroupInviteCancelWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20024</returns>
        InlineResponse20024 GroupV2KickMember (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        ApiResponse<InlineResponse20024> GroupV2KickMemberWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20029</returns>
        InlineResponse20029 GroupV2RecoverGroupForFounder (int groupType, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        ApiResponse<InlineResponse20029> GroupV2RecoverGroupForFounderWithHttpInfo (int groupType, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 GroupV2UnbanMember (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> GroupV2UnbanMemberWithHttpInfo (long groupId, long membershipId, int membershipType);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupV2ApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GroupV2AbdicateFoundershipAsync (long founderIdNew, long groupId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GroupV2AbdicateFoundershipAsyncWithHttpInfo (long founderIdNew, long groupId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GroupV2AddOptionalConversationAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GroupV2AddOptionalConversationAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GroupV2ApproveAllPendingAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GroupV2ApproveAllPendingAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GroupV2ApprovePendingAsync (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve the given membershipId to join the group/clan as long as they have applied.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GroupV2ApprovePendingAsyncWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GroupV2ApprovePendingForListAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Approve all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GroupV2ApprovePendingForListAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GroupV2BanMemberAsync (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Bans the requested member from the requested group for the specified period of time.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2BanMemberAsyncWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GroupV2DenyAllPendingAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GroupV2DenyAllPendingAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20027</returns>
        System.Threading.Tasks.Task<InlineResponse20027> GroupV2DenyPendingForListAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Deny all of the pending users for the given group that match the passed-in .
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20027>> GroupV2DenyPendingForListAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GroupV2EditClanBannerAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2EditClanBannerAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GroupV2EditFounderOptionsAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2EditFounderOptionsAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GroupV2EditGroupAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2EditGroupAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GroupV2EditGroupMembershipAsync (long groupId, long membershipId, int membershipType, int memberType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2EditGroupMembershipAsyncWithHttpInfo (long groupId, long membershipId, int membershipType, int memberType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> GroupV2EditOptionalConversationAsync (long conversationId, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> GroupV2EditOptionalConversationAsyncWithHttpInfo (long conversationId, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GroupV2GetAdminsAndFounderOfGroupAsync (int currentpage, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group who are of admin level or higher.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GroupV2GetAdminsAndFounderOfGroupAsyncWithHttpInfo (int currentpage, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> GroupV2GetAvailableAvatarsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group avatars for the signed-in user.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> GroupV2GetAvailableAvatarsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> GroupV2GetAvailableThemesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a list of all available group themes.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> GroupV2GetAvailableThemesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>Task of InlineResponse20025</returns>
        System.Threading.Tasks.Task<InlineResponse20025> GroupV2GetBannedMembersOfGroupAsync (int currentpage, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20025>> GroupV2GetBannedMembersOfGroupAsyncWithHttpInfo (int currentpage, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GroupV2GetGroupAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group of the given ID.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GroupV2GetGroupAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GroupV2GetGroupByNameAsync (string groupName, int groupType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GroupV2GetGroupByNameAsyncWithHttpInfo (string groupName, int groupType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type. The POST version.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20020</returns>
        System.Threading.Tasks.Task<InlineResponse20020> GroupV2GetGroupByNameV2Async ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about a specific group with the given name and type. The POST version.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20020>> GroupV2GetGroupByNameV2AsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of InlineResponse20021</returns>
        System.Threading.Tasks.Task<InlineResponse20021> GroupV2GetGroupOptionalConversationsAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a list of available optional conversation channels and their settings.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20021>> GroupV2GetGroupOptionalConversationsAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20028</returns>
        System.Threading.Tasks.Task<InlineResponse20028> GroupV2GetGroupsForMemberAsync (int filter, int groupType, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has joined.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20028>> GroupV2GetGroupsForMemberAsyncWithHttpInfo (int filter, int groupType, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GroupV2GetInvitedIndividualsAsync (int currentpage, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who have been invited into the group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2GetInvitedIndividualsAsyncWithHttpInfo (int currentpage, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        System.Threading.Tasks.Task<InlineResponse20023> GroupV2GetMembersOfGroupAsync (int currentpage, long groupId, int? memberType = default(int?), string nameSearch = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of members in a given group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20023>> GroupV2GetMembersOfGroupAsyncWithHttpInfo (int currentpage, long groupId, int? memberType = default(int?), string nameSearch = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        System.Threading.Tasks.Task<InlineResponse20026> GroupV2GetPendingMembershipsAsync (int currentpage, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20026>> GroupV2GetPendingMembershipsAsyncWithHttpInfo (int currentpage, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20030</returns>
        System.Threading.Tasks.Task<InlineResponse20030> GroupV2GetPotentialGroupsForMemberAsync (int filter, int groupType, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get information about the groups that a given member has applied to or been invited to.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20030>> GroupV2GetPotentialGroupsForMemberAsyncWithHttpInfo (int filter, int groupType, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <returns>Task of InlineResponse20018</returns>
        System.Threading.Tasks.Task<InlineResponse20018> GroupV2GetRecommendedGroupsAsync (int createDateRange, int groupType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20018>> GroupV2GetRecommendedGroupsAsyncWithHttpInfo (int createDateRange, int groupType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> GroupV2GetUserClanInviteSettingAsync (int mType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> GroupV2GetUserClanInviteSettingAsyncWithHttpInfo (int mType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        System.Threading.Tasks.Task<InlineResponse20019> GroupV2GroupSearchAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Groups.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20019>> GroupV2GroupSearchAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> GroupV2IndividualGroupInviteAsync (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Invite a user to join this group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GroupV2IndividualGroupInviteAsyncWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>Task of InlineResponse20031</returns>
        System.Threading.Tasks.Task<InlineResponse20031> GroupV2IndividualGroupInviteCancelAsync (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Cancels a pending invitation to join a group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20031>> GroupV2IndividualGroupInviteCancelAsyncWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20024</returns>
        System.Threading.Tasks.Task<InlineResponse20024> GroupV2KickMemberAsync (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20024>> GroupV2KickMemberAsyncWithHttpInfo (long groupId, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20029</returns>
        System.Threading.Tasks.Task<InlineResponse20029> GroupV2RecoverGroupForFounderAsync (int groupType, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20029>> GroupV2RecoverGroupForFounderAsyncWithHttpInfo (int groupType, long membershipId, int membershipType);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> GroupV2UnbanMemberAsync (long groupId, long membershipId, int membershipType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Unbans the requested member, allowing them to re-apply for membership.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> GroupV2UnbanMemberAsyncWithHttpInfo (long groupId, long membershipId, int membershipType);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGroupV2Api : IGroupV2ApiSync, IGroupV2ApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GroupV2Api : IGroupV2Api
    {
        private BungieNetApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupV2Api() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class.
        /// </summary>
        /// <returns></returns>
        public GroupV2Api(String basePath)
        {
            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                new BungieNetApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GroupV2Api(BungieNetApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GroupV2Api"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GroupV2Api(BungieNetApi.Client.ISynchronousClient client,BungieNetApi.Client.IAsynchronousClient asyncClient, BungieNetApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BungieNetApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BungieNetApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BungieNetApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GroupV2AbdicateFoundership (long founderIdNew, long groupId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20017> localVarResponse = GroupV2AbdicateFoundershipWithHttpInfo(founderIdNew, groupId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20017 > GroupV2AbdicateFoundershipWithHttpInfo (long founderIdNew, long groupId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("founderIdNew", BungieNetApi.Client.ClientUtils.ParameterToString(founderIdNew)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20017 >("/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2AbdicateFoundership", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GroupV2AbdicateFoundershipAsync (long founderIdNew, long groupId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20017> localVarResponse = await GroupV2AbdicateFoundershipAsyncWithHttpInfo(founderIdNew, groupId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  An administrative method to allow the founder of a group or clan to give up their position to another admin permanently.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="founderIdNew">The new founder for this group. Must already be a group admin.</param>
        /// <param name="groupId">The target group id.</param>
        /// <param name="membershipType">Membership type of the provided founderIdNew.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20017>> GroupV2AbdicateFoundershipAsyncWithHttpInfo (long founderIdNew, long groupId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("founderIdNew", BungieNetApi.Client.ClientUtils.ParameterToString(founderIdNew)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20017>("/GroupV2/{groupId}/Admin/AbdicateFoundership/{membershipType}/{founderIdNew}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2AbdicateFoundership", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GroupV2AddOptionalConversation (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20012> localVarResponse = GroupV2AddOptionalConversationWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20012 > GroupV2AddOptionalConversationWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20012 >("/GroupV2/{groupId}/OptionalConversations/Add/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2AddOptionalConversation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GroupV2AddOptionalConversationAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20012> localVarResponse = await GroupV2AddOptionalConversationAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Add a new optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20012>> GroupV2AddOptionalConversationAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20012>("/GroupV2/{groupId}/OptionalConversations/Add/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2AddOptionalConversation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GroupV2ApproveAllPending (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20027> localVarResponse = GroupV2ApproveAllPendingWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20027 > GroupV2ApproveAllPendingWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20027 >("/GroupV2/{groupId}/Members/ApproveAll/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApproveAllPending", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GroupV2ApproveAllPendingAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20027> localVarResponse = await GroupV2ApproveAllPendingAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20027>> GroupV2ApproveAllPendingAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20027>("/GroupV2/{groupId}/Members/ApproveAll/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApproveAllPending", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GroupV2ApprovePending (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20017> localVarResponse = GroupV2ApprovePendingWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20017 > GroupV2ApprovePendingWithHttpInfo (long groupId, long membershipId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20017 >("/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApprovePending", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GroupV2ApprovePendingAsync (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20017> localVarResponse = await GroupV2ApprovePendingAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Approve the given membershipId to join the group/clan as long as they have applied.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <param name="membershipId">The membership id being approved.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20017>> GroupV2ApprovePendingAsyncWithHttpInfo (long groupId, long membershipId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20017>("/GroupV2/{groupId}/Members/Approve/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApprovePending", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GroupV2ApprovePendingForList (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20027> localVarResponse = GroupV2ApprovePendingForListWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20027 > GroupV2ApprovePendingForListWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20027 >("/GroupV2/{groupId}/Members/ApproveList/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApprovePendingForList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GroupV2ApprovePendingForListAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20027> localVarResponse = await GroupV2ApprovePendingForListAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Approve all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20027>> GroupV2ApprovePendingForListAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20027>("/GroupV2/{groupId}/Members/ApproveList/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2ApprovePendingForList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GroupV2BanMember (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = GroupV2BanMemberWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20022 > GroupV2BanMemberWithHttpInfo (long groupId, long membershipId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20022 >("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2BanMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GroupV2BanMemberAsync (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = await GroupV2BanMemberAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Bans the requested member from the requested group for the specified period of time.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID that has the member to ban.</param>
        /// <param name="membershipId">Membership ID of the member to ban from the group.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20022>> GroupV2BanMemberAsyncWithHttpInfo (long groupId, long membershipId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20022>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Ban/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2BanMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GroupV2DenyAllPending (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20027> localVarResponse = GroupV2DenyAllPendingWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20027 > GroupV2DenyAllPendingWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20027 >("/GroupV2/{groupId}/Members/DenyAll/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2DenyAllPending", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GroupV2DenyAllPendingAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20027> localVarResponse = await GroupV2DenyAllPendingAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deny all of the pending users for the given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20027>> GroupV2DenyAllPendingAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20027>("/GroupV2/{groupId}/Members/DenyAll/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2DenyAllPending", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20027</returns>
        public InlineResponse20027 GroupV2DenyPendingForList (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20027> localVarResponse = GroupV2DenyPendingForListWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20027</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20027 > GroupV2DenyPendingForListWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20027 >("/GroupV2/{groupId}/Members/DenyList/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2DenyPendingForList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20027</returns>
        public async System.Threading.Tasks.Task<InlineResponse20027> GroupV2DenyPendingForListAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20027> localVarResponse = await GroupV2DenyPendingForListAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Deny all of the pending users for the given group that match the passed-in .
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20027)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20027>> GroupV2DenyPendingForListAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20027>("/GroupV2/{groupId}/Members/DenyList/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2DenyPendingForList", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GroupV2EditClanBanner (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = GroupV2EditClanBannerWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20022 > GroupV2EditClanBannerWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20022 >("/GroupV2/{groupId}/EditClanBanner/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditClanBanner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GroupV2EditClanBannerAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = await GroupV2EditClanBannerAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit an existing group&#39;s clan banner. You must have suitable permissions in the group to perform this operation. All fields are required.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20022>> GroupV2EditClanBannerAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20022>("/GroupV2/{groupId}/EditClanBanner/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditClanBanner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GroupV2EditFounderOptions (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = GroupV2EditFounderOptionsWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20022 > GroupV2EditFounderOptionsWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20022 >("/GroupV2/{groupId}/EditFounderOptions/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditFounderOptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GroupV2EditFounderOptionsAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = await GroupV2EditFounderOptionsAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit group options only available to a founder. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20022>> GroupV2EditFounderOptionsAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20022>("/GroupV2/{groupId}/EditFounderOptions/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditFounderOptions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GroupV2EditGroup (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = GroupV2EditGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20022 > GroupV2EditGroupWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20022 >("/GroupV2/{groupId}/Edit/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GroupV2EditGroupAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = await GroupV2EditGroupAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit an existing group. You must have suitable permissions in the group to perform this operation. This latest revision will only edit the fields you pass in - pass null for properties you want to leave unaltered.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20022>> GroupV2EditGroupAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20022>("/GroupV2/{groupId}/Edit/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GroupV2EditGroupMembership (long groupId, long membershipId, int membershipType, int memberType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = GroupV2EditGroupMembershipWithHttpInfo(groupId, membershipId, membershipType, memberType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20022 > GroupV2EditGroupMembershipWithHttpInfo (long groupId, long membershipId, int membershipType, int memberType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberType", BungieNetApi.Client.ClientUtils.ParameterToString(memberType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20022 >("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditGroupMembership", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GroupV2EditGroupMembershipAsync (long groupId, long membershipId, int membershipType, int memberType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = await GroupV2EditGroupMembershipAsyncWithHttpInfo(groupId, membershipId, membershipType, memberType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit the membership type of a given member. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group to which the member belongs.</param>
        /// <param name="membershipId">Membership ID to modify.</param>
        /// <param name="membershipType">Membership type of the provide membership ID.</param>
        /// <param name="memberType">New membertype for the specified member.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20022>> GroupV2EditGroupMembershipAsyncWithHttpInfo (long groupId, long membershipId, int membershipType, int memberType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter
            localVarRequestOptions.PathParameters.Add("memberType", BungieNetApi.Client.ClientUtils.ParameterToString(memberType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20022>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/SetMembershipType/{memberType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditGroupMembership", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 GroupV2EditOptionalConversation (long conversationId, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20012> localVarResponse = GroupV2EditOptionalConversationWithHttpInfo(conversationId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20012 > GroupV2EditOptionalConversationWithHttpInfo (long conversationId, long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("conversationId", BungieNetApi.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20012 >("/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditOptionalConversation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> GroupV2EditOptionalConversationAsync (long conversationId, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20012> localVarResponse = await GroupV2EditOptionalConversationAsyncWithHttpInfo(conversationId, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Edit the settings of an optional conversation/chat channel. Requires admin permissions to the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="conversationId">Conversation Id of the channel being edited.</param>
        /// <param name="groupId">Group ID of the group to edit.</param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20012>> GroupV2EditOptionalConversationAsyncWithHttpInfo (long conversationId, long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("conversationId", BungieNetApi.Client.ClientUtils.ParameterToString(conversationId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20012>("/GroupV2/{groupId}/OptionalConversations/Edit/{conversationId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2EditOptionalConversation", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GroupV2GetAdminsAndFounderOfGroup (int currentpage, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20023> localVarResponse = GroupV2GetAdminsAndFounderOfGroupWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20023 > GroupV2GetAdminsAndFounderOfGroupWithHttpInfo (int currentpage, long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20023 >("/GroupV2/{groupId}/AdminsAndFounder/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAdminsAndFounderOfGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> GroupV2GetAdminsAndFounderOfGroupAsync (int currentpage, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20023> localVarResponse = await GroupV2GetAdminsAndFounderOfGroupAsyncWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of members in a given group who are of admin level or higher.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20023>> GroupV2GetAdminsAndFounderOfGroupAsyncWithHttpInfo (int currentpage, long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20023>("/GroupV2/{groupId}/AdminsAndFounder/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAdminsAndFounderOfGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 GroupV2GetAvailableAvatars ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20015> localVarResponse = GroupV2GetAvailableAvatarsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20015 > GroupV2GetAvailableAvatarsWithHttpInfo ()
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20015 >("/GroupV2/GetAvailableAvatars/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAvailableAvatars", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> GroupV2GetAvailableAvatarsAsync ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20015> localVarResponse = await GroupV2GetAvailableAvatarsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of all available group avatars for the signed-in user.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20015>> GroupV2GetAvailableAvatarsAsyncWithHttpInfo ()
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20015>("/GroupV2/GetAvailableAvatars/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAvailableAvatars", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 GroupV2GetAvailableThemes ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20016> localVarResponse = GroupV2GetAvailableThemesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20016 > GroupV2GetAvailableThemesWithHttpInfo ()
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20016 >("/GroupV2/GetAvailableThemes/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAvailableThemes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> GroupV2GetAvailableThemesAsync ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20016> localVarResponse = await GroupV2GetAvailableThemesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a list of all available group themes.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20016>> GroupV2GetAvailableThemesAsyncWithHttpInfo ()
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20016>("/GroupV2/GetAvailableThemes/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetAvailableThemes", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>InlineResponse20025</returns>
        public InlineResponse20025 GroupV2GetBannedMembersOfGroup (int currentpage, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20025> localVarResponse = GroupV2GetBannedMembersOfGroupWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>ApiResponse of InlineResponse20025</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20025 > GroupV2GetBannedMembersOfGroupWithHttpInfo (int currentpage, long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20025 >("/GroupV2/{groupId}/Banned/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetBannedMembersOfGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>Task of InlineResponse20025</returns>
        public async System.Threading.Tasks.Task<InlineResponse20025> GroupV2GetBannedMembersOfGroupAsync (int currentpage, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20025> localVarResponse = await GroupV2GetBannedMembersOfGroupAsyncWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of banned members in a given group. Only accessible to group Admins and above. Not applicable to all groups. Check group features.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 entries.</param>
        /// <param name="groupId">Group ID whose banned members you are fetching</param>
        /// <returns>Task of ApiResponse (InlineResponse20025)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20025>> GroupV2GetBannedMembersOfGroupAsyncWithHttpInfo (int currentpage, long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20025>("/GroupV2/{groupId}/Banned/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetBannedMembersOfGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GroupV2GetGroup (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20020> localVarResponse = GroupV2GetGroupWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20020 > GroupV2GetGroupWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20020 >("/GroupV2/{groupId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> GroupV2GetGroupAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20020> localVarResponse = await GroupV2GetGroupAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about a specific group of the given ID.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20020>> GroupV2GetGroupAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/GroupV2/{groupId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GroupV2GetGroupByName (string groupName, int groupType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20020> localVarResponse = GroupV2GetGroupByNameWithHttpInfo(groupName, groupType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20020 > GroupV2GetGroupByNameWithHttpInfo (string groupName, int groupType)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupV2Api->GroupV2GetGroupByName");

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (groupName != null)
                localVarRequestOptions.PathParameters.Add("groupName", BungieNetApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20020 >("/GroupV2/Name/{groupName}/{groupType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> GroupV2GetGroupByNameAsync (string groupName, int groupType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20020> localVarResponse = await GroupV2GetGroupByNameAsyncWithHttpInfo(groupName, groupType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about a specific group with the given name and type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupName">Exact name of the group to find.</param>
        /// <param name="groupType">Type of group to find.</param>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20020>> GroupV2GetGroupByNameAsyncWithHttpInfo (string groupName, int groupType)
        {
            // verify the required parameter 'groupName' is set
            if (groupName == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'groupName' when calling GroupV2Api->GroupV2GetGroupByName");


            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (groupName != null)
                localVarRequestOptions.PathParameters.Add("groupName", BungieNetApi.Client.ClientUtils.ParameterToString(groupName)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20020>("/GroupV2/Name/{groupName}/{groupType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupByName", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type. The POST version.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20020</returns>
        public InlineResponse20020 GroupV2GetGroupByNameV2 ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20020> localVarResponse = GroupV2GetGroupByNameV2WithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type. The POST version.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20020</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20020 > GroupV2GetGroupByNameV2WithHttpInfo ()
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20020 >("/GroupV2/NameV2/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupByNameV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about a specific group with the given name and type. The POST version.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20020</returns>
        public async System.Threading.Tasks.Task<InlineResponse20020> GroupV2GetGroupByNameV2Async ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20020> localVarResponse = await GroupV2GetGroupByNameV2AsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about a specific group with the given name and type. The POST version.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20020)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20020>> GroupV2GetGroupByNameV2AsyncWithHttpInfo ()
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20020>("/GroupV2/NameV2/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupByNameV2", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>InlineResponse20021</returns>
        public InlineResponse20021 GroupV2GetGroupOptionalConversations (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20021> localVarResponse = GroupV2GetGroupOptionalConversationsWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>ApiResponse of InlineResponse20021</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20021 > GroupV2GetGroupOptionalConversationsWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20021 >("/GroupV2/{groupId}/OptionalConversations/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupOptionalConversations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of InlineResponse20021</returns>
        public async System.Threading.Tasks.Task<InlineResponse20021> GroupV2GetGroupOptionalConversationsAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20021> localVarResponse = await GroupV2GetGroupOptionalConversationsAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a list of available optional conversation channels and their settings.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Requested group&#39;s id.</param>
        /// <returns>Task of ApiResponse (InlineResponse20021)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20021>> GroupV2GetGroupOptionalConversationsAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20021>("/GroupV2/{groupId}/OptionalConversations/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupOptionalConversations", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20028</returns>
        public InlineResponse20028 GroupV2GetGroupsForMember (int filter, int groupType, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20028> localVarResponse = GroupV2GetGroupsForMemberWithHttpInfo(filter, groupType, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20028</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20028 > GroupV2GetGroupsForMemberWithHttpInfo (int filter, int groupType, long membershipId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("filter", BungieNetApi.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20028 >("/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupsForMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20028</returns>
        public async System.Threading.Tasks.Task<InlineResponse20028> GroupV2GetGroupsForMemberAsync (int filter, int groupType, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20028> localVarResponse = await GroupV2GetGroupsForMemberAsyncWithHttpInfo(filter, groupType, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about the groups that a given member has joined.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of joined groups.</param>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20028)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20028>> GroupV2GetGroupsForMemberAsyncWithHttpInfo (int filter, int groupType, long membershipId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("filter", BungieNetApi.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20028>("/GroupV2/User/{membershipType}/{membershipId}/{filter}/{groupType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetGroupsForMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GroupV2GetInvitedIndividuals (int currentpage, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20026> localVarResponse = GroupV2GetInvitedIndividualsWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20026 > GroupV2GetInvitedIndividualsWithHttpInfo (int currentpage, long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20026 >("/GroupV2/{groupId}/Members/InvitedIndividuals/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetInvitedIndividuals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GroupV2GetInvitedIndividualsAsync (int currentpage, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20026> localVarResponse = await GroupV2GetInvitedIndividualsAsyncWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of users who have been invited into the group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20026>> GroupV2GetInvitedIndividualsAsyncWithHttpInfo (int currentpage, long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20026>("/GroupV2/{groupId}/Members/InvitedIndividuals/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetInvitedIndividuals", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>InlineResponse20023</returns>
        public InlineResponse20023 GroupV2GetMembersOfGroup (int currentpage, long groupId, int? memberType = default(int?), string nameSearch = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20023> localVarResponse = GroupV2GetMembersOfGroupWithHttpInfo(currentpage, groupId, memberType, nameSearch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20023</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20023 > GroupV2GetMembersOfGroupWithHttpInfo (int currentpage, long groupId, int? memberType = default(int?), string nameSearch = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (memberType != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "memberType", memberType));
            }
            if (nameSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "nameSearch", nameSearch));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20023 >("/GroupV2/{groupId}/Members/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetMembersOfGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>Task of InlineResponse20023</returns>
        public async System.Threading.Tasks.Task<InlineResponse20023> GroupV2GetMembersOfGroupAsync (int currentpage, long groupId, int? memberType = default(int?), string nameSearch = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20023> localVarResponse = await GroupV2GetMembersOfGroupAsyncWithHttpInfo(currentpage, groupId, memberType, nameSearch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of members in a given group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">The ID of the group.</param>
        /// <param name="memberType">Filter out other member types. Use None for all members. (optional)</param>
        /// <param name="nameSearch">The name fragment upon which a search should be executed for members with matching display or unique names. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20023)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20023>> GroupV2GetMembersOfGroupAsyncWithHttpInfo (int currentpage, long groupId, int? memberType = default(int?), string nameSearch = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            if (memberType != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "memberType", memberType));
            }
            if (nameSearch != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "nameSearch", nameSearch));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20023>("/GroupV2/{groupId}/Members/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetMembersOfGroup", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>InlineResponse20026</returns>
        public InlineResponse20026 GroupV2GetPendingMemberships (int currentpage, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20026> localVarResponse = GroupV2GetPendingMembershipsWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>ApiResponse of InlineResponse20026</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20026 > GroupV2GetPendingMembershipsWithHttpInfo (int currentpage, long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20026 >("/GroupV2/{groupId}/Members/Pending/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetPendingMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of InlineResponse20026</returns>
        public async System.Threading.Tasks.Task<InlineResponse20026> GroupV2GetPendingMembershipsAsync (int currentpage, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20026> localVarResponse = await GroupV2GetPendingMembershipsAsyncWithHttpInfo(currentpage, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get the list of users who are awaiting a decision on their application to join a given group. Modified to include application info.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="currentpage">Page number (starting with 1). Each page has a fixed size of 50 items per page.</param>
        /// <param name="groupId">ID of the group.</param>
        /// <returns>Task of ApiResponse (InlineResponse20026)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20026>> GroupV2GetPendingMembershipsAsyncWithHttpInfo (int currentpage, long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("currentpage", BungieNetApi.Client.ClientUtils.ParameterToString(currentpage)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20026>("/GroupV2/{groupId}/Members/Pending/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetPendingMemberships", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20030</returns>
        public InlineResponse20030 GroupV2GetPotentialGroupsForMember (int filter, int groupType, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20030> localVarResponse = GroupV2GetPotentialGroupsForMemberWithHttpInfo(filter, groupType, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20030</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20030 > GroupV2GetPotentialGroupsForMemberWithHttpInfo (int filter, int groupType, long membershipId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("filter", BungieNetApi.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20030 >("/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetPotentialGroupsForMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20030</returns>
        public async System.Threading.Tasks.Task<InlineResponse20030> GroupV2GetPotentialGroupsForMemberAsync (int filter, int groupType, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20030> localVarResponse = await GroupV2GetPotentialGroupsForMemberAsyncWithHttpInfo(filter, groupType, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get information about the groups that a given member has applied to or been invited to.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter apply to list of potential joined groups.</param>
        /// <param name="groupType">Type of group the supplied member applied.</param>
        /// <param name="membershipId">Membership ID to for which to find applied groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20030)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20030>> GroupV2GetPotentialGroupsForMemberAsyncWithHttpInfo (int filter, int groupType, long membershipId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("filter", BungieNetApi.Client.ClientUtils.ParameterToString(filter)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20030>("/GroupV2/User/Potential/{membershipType}/{membershipId}/{filter}/{groupType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetPotentialGroupsForMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <returns>InlineResponse20018</returns>
        public InlineResponse20018 GroupV2GetRecommendedGroups (int createDateRange, int groupType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20018> localVarResponse = GroupV2GetRecommendedGroupsWithHttpInfo(createDateRange, groupType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <returns>ApiResponse of InlineResponse20018</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20018 > GroupV2GetRecommendedGroupsWithHttpInfo (int createDateRange, int groupType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("createDateRange", BungieNetApi.Client.ClientUtils.ParameterToString(createDateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20018 >("/GroupV2/Recommended/{groupType}/{createDateRange}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetRecommendedGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <returns>Task of InlineResponse20018</returns>
        public async System.Threading.Tasks.Task<InlineResponse20018> GroupV2GetRecommendedGroupsAsync (int createDateRange, int groupType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20018> localVarResponse = await GroupV2GetRecommendedGroupsAsyncWithHttpInfo(createDateRange, groupType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets groups recommended for you based on the groups to whom those you follow belong.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="createDateRange">Requested range in which to pull recommended groups</param>
        /// <param name="groupType">Type of groups requested</param>
        /// <returns>Task of ApiResponse (InlineResponse20018)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20018>> GroupV2GetRecommendedGroupsAsyncWithHttpInfo (int createDateRange, int groupType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("createDateRange", BungieNetApi.Client.ClientUtils.ParameterToString(createDateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20018>("/GroupV2/Recommended/{groupType}/{createDateRange}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetRecommendedGroups", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 GroupV2GetUserClanInviteSetting (int mType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20017> localVarResponse = GroupV2GetUserClanInviteSettingWithHttpInfo(mType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20017 > GroupV2GetUserClanInviteSettingWithHttpInfo (int mType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("mType", BungieNetApi.Client.ClientUtils.ParameterToString(mType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20017 >("/GroupV2/GetUserClanInviteSetting/{mType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetUserClanInviteSetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> GroupV2GetUserClanInviteSettingAsync (int mType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20017> localVarResponse = await GroupV2GetUserClanInviteSettingAsyncWithHttpInfo(mType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the state of the user&#39;s clan invite preferences for a particular membership type - true if they wish to be invited to clans, false otherwise.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mType">The Destiny membership type of the account we wish to access settings.</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20017>> GroupV2GetUserClanInviteSettingAsyncWithHttpInfo (int mType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("mType", BungieNetApi.Client.ClientUtils.ParameterToString(mType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20017>("/GroupV2/GetUserClanInviteSetting/{mType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GetUserClanInviteSetting", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20019</returns>
        public InlineResponse20019 GroupV2GroupSearch ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20019> localVarResponse = GroupV2GroupSearchWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20019</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20019 > GroupV2GroupSearchWithHttpInfo ()
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20019 >("/GroupV2/Search/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GroupSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20019</returns>
        public async System.Threading.Tasks.Task<InlineResponse20019> GroupV2GroupSearchAsync ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20019> localVarResponse = await GroupV2GroupSearchAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for Groups.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20019)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20019>> GroupV2GroupSearchAsyncWithHttpInfo ()
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20019>("/GroupV2/Search/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2GroupSearch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 GroupV2IndividualGroupInvite (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20031> localVarResponse = GroupV2IndividualGroupInviteWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20031 > GroupV2IndividualGroupInviteWithHttpInfo (long groupId, long membershipId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20031 >("/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2IndividualGroupInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> GroupV2IndividualGroupInviteAsync (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20031> localVarResponse = await GroupV2IndividualGroupInviteAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Invite a user to join this group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being invited.</param>
        /// <param name="membershipType">MembershipType of the account being invited.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20031>> GroupV2IndividualGroupInviteAsyncWithHttpInfo (long groupId, long membershipId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20031>("/GroupV2/{groupId}/Members/IndividualInvite/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2IndividualGroupInvite", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>InlineResponse20031</returns>
        public InlineResponse20031 GroupV2IndividualGroupInviteCancel (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20031> localVarResponse = GroupV2IndividualGroupInviteCancelWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>ApiResponse of InlineResponse20031</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20031 > GroupV2IndividualGroupInviteCancelWithHttpInfo (long groupId, long membershipId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20031 >("/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2IndividualGroupInviteCancel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>Task of InlineResponse20031</returns>
        public async System.Threading.Tasks.Task<InlineResponse20031> GroupV2IndividualGroupInviteCancelAsync (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20031> localVarResponse = await GroupV2IndividualGroupInviteCancelAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Cancels a pending invitation to join a group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">ID of the group you would like to join.</param>
        /// <param name="membershipId">Membership id of the account being cancelled.</param>
        /// <param name="membershipType">MembershipType of the account being cancelled.</param>
        /// <returns>Task of ApiResponse (InlineResponse20031)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20031>> GroupV2IndividualGroupInviteCancelAsyncWithHttpInfo (long groupId, long membershipId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20031>("/GroupV2/{groupId}/Members/IndividualInviteCancel/{membershipType}/{membershipId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2IndividualGroupInviteCancel", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20024</returns>
        public InlineResponse20024 GroupV2KickMember (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20024> localVarResponse = GroupV2KickMemberWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20024</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20024 > GroupV2KickMemberWithHttpInfo (long groupId, long membershipId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20024 >("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2KickMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20024</returns>
        public async System.Threading.Tasks.Task<InlineResponse20024> GroupV2KickMemberAsync (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20024> localVarResponse = await GroupV2KickMemberAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Kick a member from the given group, forcing them to reapply if they wish to re-join the group. You must have suitable permissions in the group to perform this operation.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">Group ID to kick the user from.</param>
        /// <param name="membershipId">Membership ID to kick.</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20024)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20024>> GroupV2KickMemberAsyncWithHttpInfo (long groupId, long membershipId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20024>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Kick/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2KickMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>InlineResponse20029</returns>
        public InlineResponse20029 GroupV2RecoverGroupForFounder (int groupType, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20029> localVarResponse = GroupV2RecoverGroupForFounderWithHttpInfo(groupType, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20029</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20029 > GroupV2RecoverGroupForFounderWithHttpInfo (int groupType, long membershipId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20029 >("/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2RecoverGroupForFounder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of InlineResponse20029</returns>
        public async System.Threading.Tasks.Task<InlineResponse20029> GroupV2RecoverGroupForFounderAsync (int groupType, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20029> localVarResponse = await GroupV2RecoverGroupForFounderAsyncWithHttpInfo(groupType, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Allows a founder to manually recover a group they can see in game but not on bungie.net
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupType">Type of group the supplied member founded.</param>
        /// <param name="membershipId">Membership ID to for which to find founded groups.</param>
        /// <param name="membershipType">Membership type of the supplied membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20029)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20029>> GroupV2RecoverGroupForFounderAsyncWithHttpInfo (int groupType, long membershipId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupType", BungieNetApi.Client.ClientUtils.ParameterToString(groupType)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20029>("/GroupV2/Recover/{membershipType}/{membershipId}/{groupType}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2RecoverGroupForFounder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 GroupV2UnbanMember (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = GroupV2UnbanMemberWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20022 > GroupV2UnbanMemberWithHttpInfo (long groupId, long membershipId, int membershipType)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20022 >("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2UnbanMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> GroupV2UnbanMemberAsync (long groupId, long membershipId, int membershipType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = await GroupV2UnbanMemberAsyncWithHttpInfo(groupId, membershipId, membershipType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Unbans the requested member, allowing them to re-apply for membership.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId"></param>
        /// <param name="membershipId">Membership ID of the member to unban from the group</param>
        /// <param name="membershipType">Membership type of the provided membership ID.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20022>> GroupV2UnbanMemberAsyncWithHttpInfo (long groupId, long membershipId, int membershipType)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipId", BungieNetApi.Client.ClientUtils.ParameterToString(membershipId)); // path parameter
            localVarRequestOptions.PathParameters.Add("membershipType", BungieNetApi.Client.ClientUtils.ParameterToString(membershipType)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20022>("/GroupV2/{groupId}/Members/{membershipType}/{membershipId}/Unban/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GroupV2UnbanMember", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
