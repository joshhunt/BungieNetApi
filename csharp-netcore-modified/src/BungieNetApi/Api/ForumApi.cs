/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BungieNetApi.Client;
using BungieNetApi.Model;

namespace BungieNetApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForumApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetCoreTopicsPaged (int categoryFilter, int page, int quickDate, int sort, string locales = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetCoreTopicsPagedWithHttpInfo (int categoryFilter, int page, int quickDate, int sort, string locales = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 ForumGetForumTagSuggestions (string partialtag = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> ForumGetForumTagSuggestionsWithHttpInfo (string partialtag = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPoll (long topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPollWithHttpInfo (long topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPostAndParent (long childPostId, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPostAndParentWithHttpInfo (long childPostId, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPostAndParentAwaitingApproval (long childPostId, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPostAndParentAwaitingApprovalWithHttpInfo (long childPostId, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPostsThreadedPaged (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPostsThreadedPagedWithHttpInfo (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPostsThreadedPagedFromChild (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPostsThreadedPagedFromChildWithHttpInfo (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 ForumGetRecruitmentThreadSummaries ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> ForumGetRecruitmentThreadSummariesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 ForumGetTopicForContent (long contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> ForumGetTopicForContentWithHttpInfo (long contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetTopicsPaged (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetTopicsPagedWithHttpInfo (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForumApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetCoreTopicsPagedAsync (int categoryFilter, int page, int quickDate, int sort, string locales = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetCoreTopicsPagedAsyncWithHttpInfo (int categoryFilter, int page, int quickDate, int sort, string locales = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> ForumGetForumTagSuggestionsAsync (string partialtag = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> ForumGetForumTagSuggestionsAsyncWithHttpInfo (string partialtag = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPollAsync (long topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPollAsyncWithHttpInfo (long topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostAndParentAsync (long childPostId, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostAndParentAsyncWithHttpInfo (long childPostId, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostAndParentAwaitingApprovalAsync (long childPostId, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo (long childPostId, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostsThreadedPagedAsync (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostsThreadedPagedAsyncWithHttpInfo (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostsThreadedPagedFromChildAsync (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostsThreadedPagedFromChildAsyncWithHttpInfo (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> ForumGetRecruitmentThreadSummariesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> ForumGetRecruitmentThreadSummariesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> ForumGetTopicForContentAsync (long contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> ForumGetTopicForContentAsyncWithHttpInfo (long contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetTopicsPagedAsync (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetTopicsPagedAsyncWithHttpInfo (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForumApi : IForumApiSync, IForumApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ForumApi : IForumApi
    {
        private BungieNetApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ForumApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ForumApi(String basePath)
        {
            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                new BungieNetApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ForumApi(BungieNetApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ForumApi(BungieNetApi.Client.ISynchronousClient client,BungieNetApi.Client.IAsynchronousClient asyncClient, BungieNetApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BungieNetApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BungieNetApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BungieNetApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetCoreTopicsPaged (int categoryFilter, int page, int quickDate, int sort, string locales = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = ForumGetCoreTopicsPagedWithHttpInfo(categoryFilter, page, quickDate, sort, locales);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20011 > ForumGetCoreTopicsPagedWithHttpInfo (int categoryFilter, int page, int quickDate, int sort, string locales = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("categoryFilter", BungieNetApi.Client.ClientUtils.ParameterToString(categoryFilter)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("quickDate", BungieNetApi.Client.ClientUtils.ParameterToString(quickDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("sort", BungieNetApi.Client.ClientUtils.ParameterToString(sort)); // path parameter
            if (locales != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "locales", locales));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetCoreTopicsPaged", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetCoreTopicsPagedAsync (int categoryFilter, int page, int quickDate, int sort, string locales = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = await ForumGetCoreTopicsPagedAsyncWithHttpInfo(categoryFilter, page, quickDate, sort, locales);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20011>> ForumGetCoreTopicsPagedAsyncWithHttpInfo (int categoryFilter, int page, int quickDate, int sort, string locales = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("categoryFilter", BungieNetApi.Client.ClientUtils.ParameterToString(categoryFilter)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("quickDate", BungieNetApi.Client.ClientUtils.ParameterToString(quickDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("sort", BungieNetApi.Client.ClientUtils.ParameterToString(sort)); // path parameter
            if (locales != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "locales", locales));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetCoreTopicsPaged", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 ForumGetForumTagSuggestions (string partialtag = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20013> localVarResponse = ForumGetForumTagSuggestionsWithHttpInfo(partialtag);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20013 > ForumGetForumTagSuggestionsWithHttpInfo (string partialtag = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (partialtag != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "partialtag", partialtag));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20013 >("/Forum/GetForumTagSuggestions/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetForumTagSuggestions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> ForumGetForumTagSuggestionsAsync (string partialtag = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20013> localVarResponse = await ForumGetForumTagSuggestionsAsyncWithHttpInfo(partialtag);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20013>> ForumGetForumTagSuggestionsAsyncWithHttpInfo (string partialtag = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (partialtag != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "partialtag", partialtag));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20013>("/Forum/GetForumTagSuggestions/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetForumTagSuggestions", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPoll (long topicId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = ForumGetPollWithHttpInfo(topicId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20011 > ForumGetPollWithHttpInfo (long topicId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("topicId", BungieNetApi.Client.ClientUtils.ParameterToString(topicId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/Forum/Poll/{topicId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPoll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPollAsync (long topicId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPollAsyncWithHttpInfo(topicId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20011>> ForumGetPollAsyncWithHttpInfo (long topicId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("topicId", BungieNetApi.Client.ClientUtils.ParameterToString(topicId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/Forum/Poll/{topicId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPoll", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPostAndParent (long childPostId, string showbanned = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = ForumGetPostAndParentWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20011 > ForumGetPostAndParentWithHttpInfo (long childPostId, string showbanned = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("childPostId", BungieNetApi.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/Forum/GetPostAndParent/{childPostId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostAndParent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostAndParentAsync (long childPostId, string showbanned = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPostAndParentAsyncWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20011>> ForumGetPostAndParentAsyncWithHttpInfo (long childPostId, string showbanned = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("childPostId", BungieNetApi.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/Forum/GetPostAndParent/{childPostId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostAndParent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPostAndParentAwaitingApproval (long childPostId, string showbanned = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = ForumGetPostAndParentAwaitingApprovalWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20011 > ForumGetPostAndParentAwaitingApprovalWithHttpInfo (long childPostId, string showbanned = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("childPostId", BungieNetApi.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/Forum/GetPostAndParentAwaitingApproval/{childPostId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostAndParentAwaitingApproval", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostAndParentAwaitingApprovalAsync (long childPostId, string showbanned = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20011>> ForumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo (long childPostId, string showbanned = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("childPostId", BungieNetApi.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/Forum/GetPostAndParentAwaitingApproval/{childPostId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostAndParentAwaitingApproval", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPostsThreadedPaged (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = ForumGetPostsThreadedPagedWithHttpInfo(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20011 > ForumGetPostsThreadedPagedWithHttpInfo (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("getParentPost", BungieNetApi.Client.ClientUtils.ParameterToString(getParentPost)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", BungieNetApi.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("parentPostId", BungieNetApi.Client.ClientUtils.ParameterToString(parentPostId)); // path parameter
            localVarRequestOptions.PathParameters.Add("replySize", BungieNetApi.Client.ClientUtils.ParameterToString(replySize)); // path parameter
            localVarRequestOptions.PathParameters.Add("rootThreadMode", BungieNetApi.Client.ClientUtils.ParameterToString(rootThreadMode)); // path parameter
            localVarRequestOptions.PathParameters.Add("sortMode", BungieNetApi.Client.ClientUtils.ParameterToString(sortMode)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostsThreadedPaged", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostsThreadedPagedAsync (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPostsThreadedPagedAsyncWithHttpInfo(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20011>> ForumGetPostsThreadedPagedAsyncWithHttpInfo (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("getParentPost", BungieNetApi.Client.ClientUtils.ParameterToString(getParentPost)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", BungieNetApi.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("parentPostId", BungieNetApi.Client.ClientUtils.ParameterToString(parentPostId)); // path parameter
            localVarRequestOptions.PathParameters.Add("replySize", BungieNetApi.Client.ClientUtils.ParameterToString(replySize)); // path parameter
            localVarRequestOptions.PathParameters.Add("rootThreadMode", BungieNetApi.Client.ClientUtils.ParameterToString(rootThreadMode)); // path parameter
            localVarRequestOptions.PathParameters.Add("sortMode", BungieNetApi.Client.ClientUtils.ParameterToString(sortMode)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostsThreadedPaged", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPostsThreadedPagedFromChild (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = ForumGetPostsThreadedPagedFromChildWithHttpInfo(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20011 > ForumGetPostsThreadedPagedFromChildWithHttpInfo (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("childPostId", BungieNetApi.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", BungieNetApi.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("replySize", BungieNetApi.Client.ClientUtils.ParameterToString(replySize)); // path parameter
            localVarRequestOptions.PathParameters.Add("rootThreadMode", BungieNetApi.Client.ClientUtils.ParameterToString(rootThreadMode)); // path parameter
            localVarRequestOptions.PathParameters.Add("sortMode", BungieNetApi.Client.ClientUtils.ParameterToString(sortMode)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostsThreadedPagedFromChild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostsThreadedPagedFromChildAsync (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPostsThreadedPagedFromChildAsyncWithHttpInfo(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20011>> ForumGetPostsThreadedPagedFromChildAsyncWithHttpInfo (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("childPostId", BungieNetApi.Client.ClientUtils.ParameterToString(childPostId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", BungieNetApi.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("replySize", BungieNetApi.Client.ClientUtils.ParameterToString(replySize)); // path parameter
            localVarRequestOptions.PathParameters.Add("rootThreadMode", BungieNetApi.Client.ClientUtils.ParameterToString(rootThreadMode)); // path parameter
            localVarRequestOptions.PathParameters.Add("sortMode", BungieNetApi.Client.ClientUtils.ParameterToString(sortMode)); // path parameter
            if (showbanned != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "showbanned", showbanned));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetPostsThreadedPagedFromChild", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 ForumGetRecruitmentThreadSummaries ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20014> localVarResponse = ForumGetRecruitmentThreadSummariesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20014 > ForumGetRecruitmentThreadSummariesWithHttpInfo ()
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Post< InlineResponse20014 >("/Forum/Recruit/Summaries/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetRecruitmentThreadSummaries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> ForumGetRecruitmentThreadSummariesAsync ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20014> localVarResponse = await ForumGetRecruitmentThreadSummariesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20014>> ForumGetRecruitmentThreadSummariesAsyncWithHttpInfo ()
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<InlineResponse20014>("/Forum/Recruit/Summaries/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetRecruitmentThreadSummaries", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 ForumGetTopicForContent (long contentId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20012> localVarResponse = ForumGetTopicForContentWithHttpInfo(contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20012 > ForumGetTopicForContentWithHttpInfo (long contentId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("contentId", BungieNetApi.Client.ClientUtils.ParameterToString(contentId)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20012 >("/Forum/GetTopicForContent/{contentId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetTopicForContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> ForumGetTopicForContentAsync (long contentId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20012> localVarResponse = await ForumGetTopicForContentAsyncWithHttpInfo(contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20012>> ForumGetTopicForContentAsyncWithHttpInfo (long contentId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("contentId", BungieNetApi.Client.ClientUtils.ParameterToString(contentId)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20012>("/Forum/GetTopicForContent/{contentId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetTopicForContent", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetTopicsPaged (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = ForumGetTopicsPagedWithHttpInfo(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20011 > ForumGetTopicsPagedWithHttpInfo (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("categoryFilter", BungieNetApi.Client.ClientUtils.ParameterToString(categoryFilter)); // path parameter
            localVarRequestOptions.PathParameters.Add("group", BungieNetApi.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", BungieNetApi.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("quickDate", BungieNetApi.Client.ClientUtils.ParameterToString(quickDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("sort", BungieNetApi.Client.ClientUtils.ParameterToString(sort)); // path parameter
            if (locales != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "locales", locales));
            }
            if (tagstring != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "tagstring", tagstring));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20011 >("/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetTopicsPaged", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetTopicsPagedAsync (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20011> localVarResponse = await ForumGetTopicsPagedAsyncWithHttpInfo(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20011>> ForumGetTopicsPagedAsyncWithHttpInfo (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("categoryFilter", BungieNetApi.Client.ClientUtils.ParameterToString(categoryFilter)); // path parameter
            localVarRequestOptions.PathParameters.Add("group", BungieNetApi.Client.ClientUtils.ParameterToString(group)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageSize", BungieNetApi.Client.ClientUtils.ParameterToString(pageSize)); // path parameter
            localVarRequestOptions.PathParameters.Add("quickDate", BungieNetApi.Client.ClientUtils.ParameterToString(quickDate)); // path parameter
            localVarRequestOptions.PathParameters.Add("sort", BungieNetApi.Client.ClientUtils.ParameterToString(sort)); // path parameter
            if (locales != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "locales", locales));
            }
            if (tagstring != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "tagstring", tagstring));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20011>("/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ForumGetTopicsPaged", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
