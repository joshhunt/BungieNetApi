/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BungieNetApi.Client.OpenAPIDateConverter;

namespace BungieNetApi.Model
{
    /// <summary>
    /// DestinyDefinitionsTraitsDestinyTraitCategoryDefinition
    /// </summary>
    [DataContract]
    public partial class DestinyDefinitionsTraitsDestinyTraitCategoryDefinition :  IEquatable<DestinyDefinitionsTraitsDestinyTraitCategoryDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyDefinitionsTraitsDestinyTraitCategoryDefinition" /> class.
        /// </summary>
        /// <param name="traitCategoryId">traitCategoryId.</param>
        /// <param name="traitHashes">traitHashes.</param>
        /// <param name="traitIds">traitIds.</param>
        /// <param name="hash">The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to..</param>
        /// <param name="index">The index of the entity as it was found in the investment tables..</param>
        /// <param name="redacted">If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!.</param>
        public DestinyDefinitionsTraitsDestinyTraitCategoryDefinition(string traitCategoryId = default(string), List<long> traitHashes = default(List<long>), List<string> traitIds = default(List<string>), long hash = default(long), int index = default(int), bool redacted = default(bool))
        {
            this.TraitCategoryId = traitCategoryId;
            this.TraitHashes = traitHashes;
            this.TraitIds = traitIds;
            this.Hash = hash;
            this.Index = index;
            this.Redacted = redacted;
        }
        
        /// <summary>
        /// Gets or Sets TraitCategoryId
        /// </summary>
        [DataMember(Name="traitCategoryId", EmitDefaultValue=false)]
        public string TraitCategoryId { get; set; }

        /// <summary>
        /// Gets or Sets TraitHashes
        /// </summary>
        [DataMember(Name="traitHashes", EmitDefaultValue=false)]
        public List<long> TraitHashes { get; set; }

        /// <summary>
        /// Gets or Sets TraitIds
        /// </summary>
        [DataMember(Name="traitIds", EmitDefaultValue=false)]
        public List<string> TraitIds { get; set; }

        /// <summary>
        /// The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.
        /// </summary>
        /// <value>The unique identifier for this entity. Guaranteed to be unique for the type of entity, but not globally.  When entities refer to each other in Destiny content, it is this hash that they are referring to.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public long Hash { get; set; }

        /// <summary>
        /// The index of the entity as it was found in the investment tables.
        /// </summary>
        /// <value>The index of the entity as it was found in the investment tables.</value>
        [DataMember(Name="index", EmitDefaultValue=false)]
        public int Index { get; set; }

        /// <summary>
        /// If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!
        /// </summary>
        /// <value>If this is true, then there is an entity with this identifier/type combination, but BNet is not yet allowed to show it. Sorry!</value>
        [DataMember(Name="redacted", EmitDefaultValue=false)]
        public bool Redacted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyDefinitionsTraitsDestinyTraitCategoryDefinition {\n");
            sb.Append("  TraitCategoryId: ").Append(TraitCategoryId).Append("\n");
            sb.Append("  TraitHashes: ").Append(TraitHashes).Append("\n");
            sb.Append("  TraitIds: ").Append(TraitIds).Append("\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Redacted: ").Append(Redacted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyDefinitionsTraitsDestinyTraitCategoryDefinition);
        }

        /// <summary>
        /// Returns true if DestinyDefinitionsTraitsDestinyTraitCategoryDefinition instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyDefinitionsTraitsDestinyTraitCategoryDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyDefinitionsTraitsDestinyTraitCategoryDefinition input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TraitCategoryId == input.TraitCategoryId ||
                    (this.TraitCategoryId != null &&
                    this.TraitCategoryId.Equals(input.TraitCategoryId))
                ) && 
                (
                    this.TraitHashes == input.TraitHashes ||
                    this.TraitHashes != null &&
                    input.TraitHashes != null &&
                    this.TraitHashes.SequenceEqual(input.TraitHashes)
                ) && 
                (
                    this.TraitIds == input.TraitIds ||
                    this.TraitIds != null &&
                    input.TraitIds != null &&
                    this.TraitIds.SequenceEqual(input.TraitIds)
                ) && 
                (
                    this.Hash == input.Hash ||
                    this.Hash.Equals(input.Hash)
                ) && 
                (
                    this.Index == input.Index ||
                    this.Index.Equals(input.Index)
                ) && 
                (
                    this.Redacted == input.Redacted ||
                    this.Redacted.Equals(input.Redacted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TraitCategoryId != null)
                    hashCode = hashCode * 59 + this.TraitCategoryId.GetHashCode();
                if (this.TraitHashes != null)
                    hashCode = hashCode * 59 + this.TraitHashes.GetHashCode();
                if (this.TraitIds != null)
                    hashCode = hashCode * 59 + this.TraitIds.GetHashCode();
                hashCode = hashCode * 59 + this.Hash.GetHashCode();
                hashCode = hashCode * 59 + this.Index.GetHashCode();
                hashCode = hashCode * 59 + this.Redacted.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
