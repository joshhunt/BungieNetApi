/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BungieNetApi.Client.OpenAPIDateConverter;

namespace BungieNetApi.Model
{
    /// <summary>
    /// The response object for retrieving an individual instanced item. None of these components are relevant for an item that doesn&#39;t have an \&quot;itemInstanceId\&quot;: for those, get your information from the DestinyInventoryDefinition.
    /// </summary>
    [DataContract]
    public partial class DestinyResponsesDestinyItemResponse :  IEquatable<DestinyResponsesDestinyItemResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DestinyResponsesDestinyItemResponse" /> class.
        /// </summary>
        /// <param name="characterId">If the item is on a character, this will return the ID of the character that is holding the item..</param>
        /// <param name="item">Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData.</param>
        /// <param name="instance">Basic instance data for the item.  COMPONENT TYPE: ItemInstances.</param>
        /// <param name="objectives">Information specifically about the item&#39;s objectives.  COMPONENT TYPE: ItemObjectives.</param>
        /// <param name="perks">Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks.</param>
        /// <param name="renderData">Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData.</param>
        /// <param name="stats">Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats.</param>
        /// <param name="talentGrid">Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character&#39;s \&quot;Builds\&quot;.  COMPONENT TYPE: ItemTalentGrids.</param>
        /// <param name="sockets">Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets.</param>
        /// <param name="reusablePlugs">Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.   These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.   COMPONENT TYPE: ItemReusablePlugs.</param>
        /// <param name="plugObjectives">Information about objectives on Plugs for a given item. See the component&#39;s documentation for more info.  COMPONENT TYPE: ItemPlugObjectives.</param>
        public DestinyResponsesDestinyItemResponse(long characterId = default(long), SingleComponentResponseOfDestinyItemComponent item = default(SingleComponentResponseOfDestinyItemComponent), SingleComponentResponseOfDestinyItemInstanceComponent instance = default(SingleComponentResponseOfDestinyItemInstanceComponent), SingleComponentResponseOfDestinyItemObjectivesComponent objectives = default(SingleComponentResponseOfDestinyItemObjectivesComponent), SingleComponentResponseOfDestinyItemPerksComponent perks = default(SingleComponentResponseOfDestinyItemPerksComponent), SingleComponentResponseOfDestinyItemRenderComponent renderData = default(SingleComponentResponseOfDestinyItemRenderComponent), SingleComponentResponseOfDestinyItemStatsComponent stats = default(SingleComponentResponseOfDestinyItemStatsComponent), SingleComponentResponseOfDestinyItemTalentGridComponent talentGrid = default(SingleComponentResponseOfDestinyItemTalentGridComponent), SingleComponentResponseOfDestinyItemSocketsComponent sockets = default(SingleComponentResponseOfDestinyItemSocketsComponent), SingleComponentResponseOfDestinyItemReusablePlugsComponent reusablePlugs = default(SingleComponentResponseOfDestinyItemReusablePlugsComponent), SingleComponentResponseOfDestinyItemPlugObjectivesComponent plugObjectives = default(SingleComponentResponseOfDestinyItemPlugObjectivesComponent))
        {
            this.CharacterId = characterId;
            this.Item = item;
            this.Instance = instance;
            this.Objectives = objectives;
            this.Perks = perks;
            this.RenderData = renderData;
            this.Stats = stats;
            this.TalentGrid = talentGrid;
            this.Sockets = sockets;
            this.ReusablePlugs = reusablePlugs;
            this.PlugObjectives = plugObjectives;
        }
        
        /// <summary>
        /// If the item is on a character, this will return the ID of the character that is holding the item.
        /// </summary>
        /// <value>If the item is on a character, this will return the ID of the character that is holding the item.</value>
        [DataMember(Name="characterId", EmitDefaultValue=false)]
        public long CharacterId { get; set; }

        /// <summary>
        /// Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData
        /// </summary>
        /// <value>Common data for the item relevant to its non-instanced properties.  COMPONENT TYPE: ItemCommonData</value>
        [DataMember(Name="item", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemComponent Item { get; set; }

        /// <summary>
        /// Basic instance data for the item.  COMPONENT TYPE: ItemInstances
        /// </summary>
        /// <value>Basic instance data for the item.  COMPONENT TYPE: ItemInstances</value>
        [DataMember(Name="instance", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemInstanceComponent Instance { get; set; }

        /// <summary>
        /// Information specifically about the item&#39;s objectives.  COMPONENT TYPE: ItemObjectives
        /// </summary>
        /// <value>Information specifically about the item&#39;s objectives.  COMPONENT TYPE: ItemObjectives</value>
        [DataMember(Name="objectives", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemObjectivesComponent Objectives { get; set; }

        /// <summary>
        /// Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks
        /// </summary>
        /// <value>Information specifically about the perks currently active on the item.  COMPONENT TYPE: ItemPerks</value>
        [DataMember(Name="perks", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemPerksComponent Perks { get; set; }

        /// <summary>
        /// Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData
        /// </summary>
        /// <value>Information about how to render the item in 3D.  COMPONENT TYPE: ItemRenderData</value>
        [DataMember(Name="renderData", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemRenderComponent RenderData { get; set; }

        /// <summary>
        /// Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats
        /// </summary>
        /// <value>Information about the computed stats of the item: power, defense, etc...  COMPONENT TYPE: ItemStats</value>
        [DataMember(Name="stats", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemStatsComponent Stats { get; set; }

        /// <summary>
        /// Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character&#39;s \&quot;Builds\&quot;.  COMPONENT TYPE: ItemTalentGrids
        /// </summary>
        /// <value>Information about the talent grid attached to the item. Talent nodes can provide a variety of benefits and abilities, and in Destiny 2 are used almost exclusively for the character&#39;s \&quot;Builds\&quot;.  COMPONENT TYPE: ItemTalentGrids</value>
        [DataMember(Name="talentGrid", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemTalentGridComponent TalentGrid { get; set; }

        /// <summary>
        /// Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets
        /// </summary>
        /// <value>Information about the sockets of the item: which are currently active, what potential sockets you could have and the stats/abilities/perks you can gain from them.  COMPONENT TYPE: ItemSockets</value>
        [DataMember(Name="sockets", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemSocketsComponent Sockets { get; set; }

        /// <summary>
        /// Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.   These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.   COMPONENT TYPE: ItemReusablePlugs
        /// </summary>
        /// <value>Information about the Reusable Plugs for sockets on an item. These are plugs that you can insert into the given socket regardless of if you actually own an instance of that plug: they are logic-driven plugs rather than inventory-driven.   These may need to be combined with Plug Set component data to get a full picture of available plugs on a given socket.   COMPONENT TYPE: ItemReusablePlugs</value>
        [DataMember(Name="reusablePlugs", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemReusablePlugsComponent ReusablePlugs { get; set; }

        /// <summary>
        /// Information about objectives on Plugs for a given item. See the component&#39;s documentation for more info.  COMPONENT TYPE: ItemPlugObjectives
        /// </summary>
        /// <value>Information about objectives on Plugs for a given item. See the component&#39;s documentation for more info.  COMPONENT TYPE: ItemPlugObjectives</value>
        [DataMember(Name="plugObjectives", EmitDefaultValue=false)]
        public SingleComponentResponseOfDestinyItemPlugObjectivesComponent PlugObjectives { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinyResponsesDestinyItemResponse {\n");
            sb.Append("  CharacterId: ").Append(CharacterId).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Instance: ").Append(Instance).Append("\n");
            sb.Append("  Objectives: ").Append(Objectives).Append("\n");
            sb.Append("  Perks: ").Append(Perks).Append("\n");
            sb.Append("  RenderData: ").Append(RenderData).Append("\n");
            sb.Append("  Stats: ").Append(Stats).Append("\n");
            sb.Append("  TalentGrid: ").Append(TalentGrid).Append("\n");
            sb.Append("  Sockets: ").Append(Sockets).Append("\n");
            sb.Append("  ReusablePlugs: ").Append(ReusablePlugs).Append("\n");
            sb.Append("  PlugObjectives: ").Append(PlugObjectives).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DestinyResponsesDestinyItemResponse);
        }

        /// <summary>
        /// Returns true if DestinyResponsesDestinyItemResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of DestinyResponsesDestinyItemResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinyResponsesDestinyItemResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CharacterId == input.CharacterId ||
                    this.CharacterId.Equals(input.CharacterId)
                ) && 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.Instance == input.Instance ||
                    (this.Instance != null &&
                    this.Instance.Equals(input.Instance))
                ) && 
                (
                    this.Objectives == input.Objectives ||
                    (this.Objectives != null &&
                    this.Objectives.Equals(input.Objectives))
                ) && 
                (
                    this.Perks == input.Perks ||
                    (this.Perks != null &&
                    this.Perks.Equals(input.Perks))
                ) && 
                (
                    this.RenderData == input.RenderData ||
                    (this.RenderData != null &&
                    this.RenderData.Equals(input.RenderData))
                ) && 
                (
                    this.Stats == input.Stats ||
                    (this.Stats != null &&
                    this.Stats.Equals(input.Stats))
                ) && 
                (
                    this.TalentGrid == input.TalentGrid ||
                    (this.TalentGrid != null &&
                    this.TalentGrid.Equals(input.TalentGrid))
                ) && 
                (
                    this.Sockets == input.Sockets ||
                    (this.Sockets != null &&
                    this.Sockets.Equals(input.Sockets))
                ) && 
                (
                    this.ReusablePlugs == input.ReusablePlugs ||
                    (this.ReusablePlugs != null &&
                    this.ReusablePlugs.Equals(input.ReusablePlugs))
                ) && 
                (
                    this.PlugObjectives == input.PlugObjectives ||
                    (this.PlugObjectives != null &&
                    this.PlugObjectives.Equals(input.PlugObjectives))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CharacterId.GetHashCode();
                if (this.Item != null)
                    hashCode = hashCode * 59 + this.Item.GetHashCode();
                if (this.Instance != null)
                    hashCode = hashCode * 59 + this.Instance.GetHashCode();
                if (this.Objectives != null)
                    hashCode = hashCode * 59 + this.Objectives.GetHashCode();
                if (this.Perks != null)
                    hashCode = hashCode * 59 + this.Perks.GetHashCode();
                if (this.RenderData != null)
                    hashCode = hashCode * 59 + this.RenderData.GetHashCode();
                if (this.Stats != null)
                    hashCode = hashCode * 59 + this.Stats.GetHashCode();
                if (this.TalentGrid != null)
                    hashCode = hashCode * 59 + this.TalentGrid.GetHashCode();
                if (this.Sockets != null)
                    hashCode = hashCode * 59 + this.Sockets.GetHashCode();
                if (this.ReusablePlugs != null)
                    hashCode = hashCode * 59 + this.ReusablePlugs.GetHashCode();
                if (this.PlugObjectives != null)
                    hashCode = hashCode * 59 + this.PlugObjectives.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
