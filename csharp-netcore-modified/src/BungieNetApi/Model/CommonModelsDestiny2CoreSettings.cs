/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = BungieNetApi.Client.OpenAPIDateConverter;

namespace BungieNetApi.Model
{
    /// <summary>
    /// CommonModelsDestiny2CoreSettings
    /// </summary>
    [DataContract]
    public partial class CommonModelsDestiny2CoreSettings :  IEquatable<CommonModelsDestiny2CoreSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommonModelsDestiny2CoreSettings" /> class.
        /// </summary>
        /// <param name="collectionRootNode">collectionRootNode.</param>
        /// <param name="badgesRootNode">badgesRootNode.</param>
        /// <param name="recordsRootNode">recordsRootNode.</param>
        /// <param name="medalsRootNode">medalsRootNode.</param>
        /// <param name="metricsRootNode">metricsRootNode.</param>
        /// <param name="currentRankProgressionHashes">currentRankProgressionHashes.</param>
        /// <param name="undiscoveredCollectibleImage">undiscoveredCollectibleImage.</param>
        /// <param name="ammoTypeHeavyIcon">ammoTypeHeavyIcon.</param>
        /// <param name="ammoTypeSpecialIcon">ammoTypeSpecialIcon.</param>
        /// <param name="ammoTypePrimaryIcon">ammoTypePrimaryIcon.</param>
        /// <param name="currentSeasonalArtifactHash">currentSeasonalArtifactHash.</param>
        /// <param name="currentSeasonHash">currentSeasonHash.</param>
        /// <param name="futureSeasonHashes">futureSeasonHashes.</param>
        /// <param name="pastSeasonHashes">pastSeasonHashes.</param>
        public CommonModelsDestiny2CoreSettings(long collectionRootNode = default(long), long badgesRootNode = default(long), long recordsRootNode = default(long), long medalsRootNode = default(long), long metricsRootNode = default(long), List<long> currentRankProgressionHashes = default(List<long>), string undiscoveredCollectibleImage = default(string), string ammoTypeHeavyIcon = default(string), string ammoTypeSpecialIcon = default(string), string ammoTypePrimaryIcon = default(string), long currentSeasonalArtifactHash = default(long), long currentSeasonHash = default(long), List<long> futureSeasonHashes = default(List<long>), List<long> pastSeasonHashes = default(List<long>))
        {
            this.CollectionRootNode = collectionRootNode;
            this.BadgesRootNode = badgesRootNode;
            this.RecordsRootNode = recordsRootNode;
            this.MedalsRootNode = medalsRootNode;
            this.MetricsRootNode = metricsRootNode;
            this.CurrentRankProgressionHashes = currentRankProgressionHashes;
            this.UndiscoveredCollectibleImage = undiscoveredCollectibleImage;
            this.AmmoTypeHeavyIcon = ammoTypeHeavyIcon;
            this.AmmoTypeSpecialIcon = ammoTypeSpecialIcon;
            this.AmmoTypePrimaryIcon = ammoTypePrimaryIcon;
            this.CurrentSeasonalArtifactHash = currentSeasonalArtifactHash;
            this.CurrentSeasonHash = currentSeasonHash;
            this.FutureSeasonHashes = futureSeasonHashes;
            this.PastSeasonHashes = pastSeasonHashes;
        }
        
        /// <summary>
        /// Gets or Sets CollectionRootNode
        /// </summary>
        [DataMember(Name="collectionRootNode", EmitDefaultValue=false)]
        public long CollectionRootNode { get; set; }

        /// <summary>
        /// Gets or Sets BadgesRootNode
        /// </summary>
        [DataMember(Name="badgesRootNode", EmitDefaultValue=false)]
        public long BadgesRootNode { get; set; }

        /// <summary>
        /// Gets or Sets RecordsRootNode
        /// </summary>
        [DataMember(Name="recordsRootNode", EmitDefaultValue=false)]
        public long RecordsRootNode { get; set; }

        /// <summary>
        /// Gets or Sets MedalsRootNode
        /// </summary>
        [DataMember(Name="medalsRootNode", EmitDefaultValue=false)]
        public long MedalsRootNode { get; set; }

        /// <summary>
        /// Gets or Sets MetricsRootNode
        /// </summary>
        [DataMember(Name="metricsRootNode", EmitDefaultValue=false)]
        public long MetricsRootNode { get; set; }

        /// <summary>
        /// Gets or Sets CurrentRankProgressionHashes
        /// </summary>
        [DataMember(Name="currentRankProgressionHashes", EmitDefaultValue=false)]
        public List<long> CurrentRankProgressionHashes { get; set; }

        /// <summary>
        /// Gets or Sets UndiscoveredCollectibleImage
        /// </summary>
        [DataMember(Name="undiscoveredCollectibleImage", EmitDefaultValue=false)]
        public string UndiscoveredCollectibleImage { get; set; }

        /// <summary>
        /// Gets or Sets AmmoTypeHeavyIcon
        /// </summary>
        [DataMember(Name="ammoTypeHeavyIcon", EmitDefaultValue=false)]
        public string AmmoTypeHeavyIcon { get; set; }

        /// <summary>
        /// Gets or Sets AmmoTypeSpecialIcon
        /// </summary>
        [DataMember(Name="ammoTypeSpecialIcon", EmitDefaultValue=false)]
        public string AmmoTypeSpecialIcon { get; set; }

        /// <summary>
        /// Gets or Sets AmmoTypePrimaryIcon
        /// </summary>
        [DataMember(Name="ammoTypePrimaryIcon", EmitDefaultValue=false)]
        public string AmmoTypePrimaryIcon { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSeasonalArtifactHash
        /// </summary>
        [DataMember(Name="currentSeasonalArtifactHash", EmitDefaultValue=false)]
        public long CurrentSeasonalArtifactHash { get; set; }

        /// <summary>
        /// Gets or Sets CurrentSeasonHash
        /// </summary>
        [DataMember(Name="currentSeasonHash", EmitDefaultValue=false)]
        public long CurrentSeasonHash { get; set; }

        /// <summary>
        /// Gets or Sets FutureSeasonHashes
        /// </summary>
        [DataMember(Name="futureSeasonHashes", EmitDefaultValue=false)]
        public List<long> FutureSeasonHashes { get; set; }

        /// <summary>
        /// Gets or Sets PastSeasonHashes
        /// </summary>
        [DataMember(Name="pastSeasonHashes", EmitDefaultValue=false)]
        public List<long> PastSeasonHashes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommonModelsDestiny2CoreSettings {\n");
            sb.Append("  CollectionRootNode: ").Append(CollectionRootNode).Append("\n");
            sb.Append("  BadgesRootNode: ").Append(BadgesRootNode).Append("\n");
            sb.Append("  RecordsRootNode: ").Append(RecordsRootNode).Append("\n");
            sb.Append("  MedalsRootNode: ").Append(MedalsRootNode).Append("\n");
            sb.Append("  MetricsRootNode: ").Append(MetricsRootNode).Append("\n");
            sb.Append("  CurrentRankProgressionHashes: ").Append(CurrentRankProgressionHashes).Append("\n");
            sb.Append("  UndiscoveredCollectibleImage: ").Append(UndiscoveredCollectibleImage).Append("\n");
            sb.Append("  AmmoTypeHeavyIcon: ").Append(AmmoTypeHeavyIcon).Append("\n");
            sb.Append("  AmmoTypeSpecialIcon: ").Append(AmmoTypeSpecialIcon).Append("\n");
            sb.Append("  AmmoTypePrimaryIcon: ").Append(AmmoTypePrimaryIcon).Append("\n");
            sb.Append("  CurrentSeasonalArtifactHash: ").Append(CurrentSeasonalArtifactHash).Append("\n");
            sb.Append("  CurrentSeasonHash: ").Append(CurrentSeasonHash).Append("\n");
            sb.Append("  FutureSeasonHashes: ").Append(FutureSeasonHashes).Append("\n");
            sb.Append("  PastSeasonHashes: ").Append(PastSeasonHashes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommonModelsDestiny2CoreSettings);
        }

        /// <summary>
        /// Returns true if CommonModelsDestiny2CoreSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of CommonModelsDestiny2CoreSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommonModelsDestiny2CoreSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CollectionRootNode == input.CollectionRootNode ||
                    this.CollectionRootNode.Equals(input.CollectionRootNode)
                ) && 
                (
                    this.BadgesRootNode == input.BadgesRootNode ||
                    this.BadgesRootNode.Equals(input.BadgesRootNode)
                ) && 
                (
                    this.RecordsRootNode == input.RecordsRootNode ||
                    this.RecordsRootNode.Equals(input.RecordsRootNode)
                ) && 
                (
                    this.MedalsRootNode == input.MedalsRootNode ||
                    this.MedalsRootNode.Equals(input.MedalsRootNode)
                ) && 
                (
                    this.MetricsRootNode == input.MetricsRootNode ||
                    this.MetricsRootNode.Equals(input.MetricsRootNode)
                ) && 
                (
                    this.CurrentRankProgressionHashes == input.CurrentRankProgressionHashes ||
                    this.CurrentRankProgressionHashes != null &&
                    input.CurrentRankProgressionHashes != null &&
                    this.CurrentRankProgressionHashes.SequenceEqual(input.CurrentRankProgressionHashes)
                ) && 
                (
                    this.UndiscoveredCollectibleImage == input.UndiscoveredCollectibleImage ||
                    (this.UndiscoveredCollectibleImage != null &&
                    this.UndiscoveredCollectibleImage.Equals(input.UndiscoveredCollectibleImage))
                ) && 
                (
                    this.AmmoTypeHeavyIcon == input.AmmoTypeHeavyIcon ||
                    (this.AmmoTypeHeavyIcon != null &&
                    this.AmmoTypeHeavyIcon.Equals(input.AmmoTypeHeavyIcon))
                ) && 
                (
                    this.AmmoTypeSpecialIcon == input.AmmoTypeSpecialIcon ||
                    (this.AmmoTypeSpecialIcon != null &&
                    this.AmmoTypeSpecialIcon.Equals(input.AmmoTypeSpecialIcon))
                ) && 
                (
                    this.AmmoTypePrimaryIcon == input.AmmoTypePrimaryIcon ||
                    (this.AmmoTypePrimaryIcon != null &&
                    this.AmmoTypePrimaryIcon.Equals(input.AmmoTypePrimaryIcon))
                ) && 
                (
                    this.CurrentSeasonalArtifactHash == input.CurrentSeasonalArtifactHash ||
                    this.CurrentSeasonalArtifactHash.Equals(input.CurrentSeasonalArtifactHash)
                ) && 
                (
                    this.CurrentSeasonHash == input.CurrentSeasonHash ||
                    this.CurrentSeasonHash.Equals(input.CurrentSeasonHash)
                ) && 
                (
                    this.FutureSeasonHashes == input.FutureSeasonHashes ||
                    this.FutureSeasonHashes != null &&
                    input.FutureSeasonHashes != null &&
                    this.FutureSeasonHashes.SequenceEqual(input.FutureSeasonHashes)
                ) && 
                (
                    this.PastSeasonHashes == input.PastSeasonHashes ||
                    this.PastSeasonHashes != null &&
                    input.PastSeasonHashes != null &&
                    this.PastSeasonHashes.SequenceEqual(input.PastSeasonHashes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.CollectionRootNode.GetHashCode();
                hashCode = hashCode * 59 + this.BadgesRootNode.GetHashCode();
                hashCode = hashCode * 59 + this.RecordsRootNode.GetHashCode();
                hashCode = hashCode * 59 + this.MedalsRootNode.GetHashCode();
                hashCode = hashCode * 59 + this.MetricsRootNode.GetHashCode();
                if (this.CurrentRankProgressionHashes != null)
                    hashCode = hashCode * 59 + this.CurrentRankProgressionHashes.GetHashCode();
                if (this.UndiscoveredCollectibleImage != null)
                    hashCode = hashCode * 59 + this.UndiscoveredCollectibleImage.GetHashCode();
                if (this.AmmoTypeHeavyIcon != null)
                    hashCode = hashCode * 59 + this.AmmoTypeHeavyIcon.GetHashCode();
                if (this.AmmoTypeSpecialIcon != null)
                    hashCode = hashCode * 59 + this.AmmoTypeSpecialIcon.GetHashCode();
                if (this.AmmoTypePrimaryIcon != null)
                    hashCode = hashCode * 59 + this.AmmoTypePrimaryIcon.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentSeasonalArtifactHash.GetHashCode();
                hashCode = hashCode * 59 + this.CurrentSeasonHash.GetHashCode();
                if (this.FutureSeasonHashes != null)
                    hashCode = hashCode * 59 + this.FutureSeasonHashes.GetHashCode();
                if (this.PastSeasonHashes != null)
                    hashCode = hashCode * 59 + this.PastSeasonHashes.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
