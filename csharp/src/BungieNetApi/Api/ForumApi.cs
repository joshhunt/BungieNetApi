/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using BungieNetApi.Client;
using BungieNetApi.Model;

namespace BungieNetApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IForumApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetCoreTopicsPaged (int categoryFilter, int page, int quickDate, int sort, string locales = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetCoreTopicsPagedWithHttpInfo (int categoryFilter, int page, int quickDate, int sort, string locales = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 ForumGetForumTagSuggestions (string partialtag = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> ForumGetForumTagSuggestionsWithHttpInfo (string partialtag = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPoll (long topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPollWithHttpInfo (long topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPostAndParent (long childPostId, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPostAndParentWithHttpInfo (long childPostId, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPostAndParentAwaitingApproval (long childPostId, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPostAndParentAwaitingApprovalWithHttpInfo (long childPostId, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPostsThreadedPaged (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPostsThreadedPagedWithHttpInfo (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetPostsThreadedPagedFromChild (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetPostsThreadedPagedFromChildWithHttpInfo (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 ForumGetRecruitmentThreadSummaries ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> ForumGetRecruitmentThreadSummariesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 ForumGetTopicForContent (long contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> ForumGetTopicForContentWithHttpInfo (long contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        InlineResponse20011 ForumGetTopicsPaged (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        ApiResponse<InlineResponse20011> ForumGetTopicsPagedWithHttpInfo (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string));
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetCoreTopicsPagedAsync (int categoryFilter, int page, int quickDate, int sort, string locales = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all topics marked as part of the core group.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetCoreTopicsPagedAsyncWithHttpInfo (int categoryFilter, int page, int quickDate, int sort, string locales = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> ForumGetForumTagSuggestionsAsync (string partialtag = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> ForumGetForumTagSuggestionsAsyncWithHttpInfo (string partialtag = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPollAsync (long topicId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the specified forum poll.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPollAsyncWithHttpInfo (long topicId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostAndParentAsync (long childPostId, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostAndParentAsyncWithHttpInfo (long childPostId, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostAndParentAwaitingApprovalAsync (long childPostId, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo (long childPostId, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostsThreadedPagedAsync (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostsThreadedPagedAsyncWithHttpInfo (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostsThreadedPagedFromChildAsync (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostsThreadedPagedFromChildAsyncWithHttpInfo (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> ForumGetRecruitmentThreadSummariesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> ForumGetRecruitmentThreadSummariesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> ForumGetTopicForContentAsync (long contentId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> ForumGetTopicForContentAsyncWithHttpInfo (long contentId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        System.Threading.Tasks.Task<InlineResponse20011> ForumGetTopicsPagedAsync (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get topics from any forum.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetTopicsPagedAsyncWithHttpInfo (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ForumApi : IForumApi
    {
        private BungieNetApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ForumApi(String basePath)
        {
            this.Configuration = new BungieNetApi.Client.Configuration { BasePath = basePath };

            ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class
        /// </summary>
        /// <returns></returns>
        public ForumApi()
        {
            this.Configuration = BungieNetApi.Client.Configuration.Default;

            ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ForumApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ForumApi(BungieNetApi.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = BungieNetApi.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BungieNetApi.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetCoreTopicsPaged (int categoryFilter, int page, int quickDate, int sort, string locales = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = ForumGetCoreTopicsPagedWithHttpInfo(categoryFilter, page, quickDate, sort, locales);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> ForumGetCoreTopicsPagedWithHttpInfo (int categoryFilter, int page, int quickDate, int sort, string locales = default(string))
        {
            // verify the required parameter 'categoryFilter' is set
            if (categoryFilter == null)
                throw new ApiException(400, "Missing required parameter 'categoryFilter' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'quickDate' is set
            if (quickDate == null)
                throw new ApiException(400, "Missing required parameter 'quickDate' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ForumApi->ForumGetCoreTopicsPaged");

            var localVarPath = "/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryFilter != null) localVarPathParams.Add("categoryFilter", this.Configuration.ApiClient.ParameterToString(categoryFilter)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (quickDate != null) localVarPathParams.Add("quickDate", this.Configuration.ApiClient.ParameterToString(quickDate)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", this.Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locales", locales)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetCoreTopicsPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetCoreTopicsPagedAsync (int categoryFilter, int page, int quickDate, int sort, string locales = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = await ForumGetCoreTopicsPagedAsyncWithHttpInfo(categoryFilter, page, quickDate, sort, locales);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a listing of all topics marked as part of the core group.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">The category filter.</param>
        /// <param name="page">Zero base page</param>
        /// <param name="quickDate">The date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetCoreTopicsPagedAsyncWithHttpInfo (int categoryFilter, int page, int quickDate, int sort, string locales = default(string))
        {
            // verify the required parameter 'categoryFilter' is set
            if (categoryFilter == null)
                throw new ApiException(400, "Missing required parameter 'categoryFilter' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'quickDate' is set
            if (quickDate == null)
                throw new ApiException(400, "Missing required parameter 'quickDate' when calling ForumApi->ForumGetCoreTopicsPaged");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ForumApi->ForumGetCoreTopicsPaged");

            var localVarPath = "/Forum/GetCoreTopicsPaged/{page}/{sort}/{quickDate}/{categoryFilter}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryFilter != null) localVarPathParams.Add("categoryFilter", this.Configuration.ApiClient.ParameterToString(categoryFilter)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (quickDate != null) localVarPathParams.Add("quickDate", this.Configuration.ApiClient.ParameterToString(quickDate)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", this.Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locales", locales)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetCoreTopicsPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 ForumGetForumTagSuggestions (string partialtag = default(string))
        {
             ApiResponse<InlineResponse20013> localVarResponse = ForumGetForumTagSuggestionsWithHttpInfo(partialtag);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse<InlineResponse20013> ForumGetForumTagSuggestionsWithHttpInfo (string partialtag = default(string))
        {

            var localVarPath = "/Forum/GetForumTagSuggestions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partialtag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partialtag", partialtag)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetForumTagSuggestions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> ForumGetForumTagSuggestionsAsync (string partialtag = default(string))
        {
             ApiResponse<InlineResponse20013> localVarResponse = await ForumGetForumTagSuggestionsAsyncWithHttpInfo(partialtag);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets tag suggestions based on partial text entry, matching them with other tags previously used in the forums.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="partialtag">The partial tag input to generate suggestions from. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> ForumGetForumTagSuggestionsAsyncWithHttpInfo (string partialtag = default(string))
        {

            var localVarPath = "/Forum/GetForumTagSuggestions/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (partialtag != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "partialtag", partialtag)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetForumTagSuggestions", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPoll (long topicId)
        {
             ApiResponse<InlineResponse20011> localVarResponse = ForumGetPollWithHttpInfo(topicId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> ForumGetPollWithHttpInfo (long topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumGetPoll");

            var localVarPath = "/Forum/Poll/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", this.Configuration.ApiClient.ParameterToString(topicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPollAsync (long topicId)
        {
             ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPollAsyncWithHttpInfo(topicId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the specified forum poll.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="topicId">The post id of the topic that has the poll.</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPollAsyncWithHttpInfo (long topicId)
        {
            // verify the required parameter 'topicId' is set
            if (topicId == null)
                throw new ApiException(400, "Missing required parameter 'topicId' when calling ForumApi->ForumGetPoll");

            var localVarPath = "/Forum/Poll/{topicId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (topicId != null) localVarPathParams.Add("topicId", this.Configuration.ApiClient.ParameterToString(topicId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPoll", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPostAndParent (long childPostId, string showbanned = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = ForumGetPostAndParentWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> ForumGetPostAndParentWithHttpInfo (long childPostId, string showbanned = default(string))
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostAndParent");

            var localVarPath = "/Forum/GetPostAndParent/{childPostId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", this.Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostAndParent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostAndParentAsync (long childPostId, string showbanned = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPostAndParentAsyncWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the post specified and its immediate parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostAndParentAsyncWithHttpInfo (long childPostId, string showbanned = default(string))
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostAndParent");

            var localVarPath = "/Forum/GetPostAndParent/{childPostId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", this.Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostAndParent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPostAndParentAwaitingApproval (long childPostId, string showbanned = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = ForumGetPostAndParentAwaitingApprovalWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> ForumGetPostAndParentAwaitingApprovalWithHttpInfo (long childPostId, string showbanned = default(string))
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostAndParentAwaitingApproval");

            var localVarPath = "/Forum/GetPostAndParentAwaitingApproval/{childPostId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", this.Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostAndParentAwaitingApproval", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostAndParentAwaitingApprovalAsync (long childPostId, string showbanned = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo(childPostId, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the post specified and its immediate parent of posts that are awaiting approval.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostAndParentAwaitingApprovalAsyncWithHttpInfo (long childPostId, string showbanned = default(string))
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostAndParentAwaitingApproval");

            var localVarPath = "/Forum/GetPostAndParentAwaitingApproval/{childPostId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", this.Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostAndParentAwaitingApproval", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPostsThreadedPaged (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = ForumGetPostsThreadedPagedWithHttpInfo(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> ForumGetPostsThreadedPagedWithHttpInfo (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
            // verify the required parameter 'getParentPost' is set
            if (getParentPost == null)
                throw new ApiException(400, "Missing required parameter 'getParentPost' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'parentPostId' is set
            if (parentPostId == null)
                throw new ApiException(400, "Missing required parameter 'parentPostId' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'replySize' is set
            if (replySize == null)
                throw new ApiException(400, "Missing required parameter 'replySize' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'rootThreadMode' is set
            if (rootThreadMode == null)
                throw new ApiException(400, "Missing required parameter 'rootThreadMode' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'sortMode' is set
            if (sortMode == null)
                throw new ApiException(400, "Missing required parameter 'sortMode' when calling ForumApi->ForumGetPostsThreadedPaged");

            var localVarPath = "/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getParentPost != null) localVarPathParams.Add("getParentPost", this.Configuration.ApiClient.ParameterToString(getParentPost)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (parentPostId != null) localVarPathParams.Add("parentPostId", this.Configuration.ApiClient.ParameterToString(parentPostId)); // path parameter
            if (replySize != null) localVarPathParams.Add("replySize", this.Configuration.ApiClient.ParameterToString(replySize)); // path parameter
            if (rootThreadMode != null) localVarPathParams.Add("rootThreadMode", this.Configuration.ApiClient.ParameterToString(rootThreadMode)); // path parameter
            if (sortMode != null) localVarPathParams.Add("sortMode", this.Configuration.ApiClient.ParameterToString(sortMode)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostsThreadedPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostsThreadedPagedAsync (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPostsThreadedPagedAsyncWithHttpInfo(getParentPost, page, pageSize, parentPostId, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a thread of posts at the given parent, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="getParentPost"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="parentPostId"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostsThreadedPagedAsyncWithHttpInfo (bool getParentPost, int page, int pageSize, long parentPostId, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
            // verify the required parameter 'getParentPost' is set
            if (getParentPost == null)
                throw new ApiException(400, "Missing required parameter 'getParentPost' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'parentPostId' is set
            if (parentPostId == null)
                throw new ApiException(400, "Missing required parameter 'parentPostId' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'replySize' is set
            if (replySize == null)
                throw new ApiException(400, "Missing required parameter 'replySize' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'rootThreadMode' is set
            if (rootThreadMode == null)
                throw new ApiException(400, "Missing required parameter 'rootThreadMode' when calling ForumApi->ForumGetPostsThreadedPaged");
            // verify the required parameter 'sortMode' is set
            if (sortMode == null)
                throw new ApiException(400, "Missing required parameter 'sortMode' when calling ForumApi->ForumGetPostsThreadedPaged");

            var localVarPath = "/Forum/GetPostsThreadedPaged/{parentPostId}/{page}/{pageSize}/{replySize}/{getParentPost}/{rootThreadMode}/{sortMode}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (getParentPost != null) localVarPathParams.Add("getParentPost", this.Configuration.ApiClient.ParameterToString(getParentPost)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (parentPostId != null) localVarPathParams.Add("parentPostId", this.Configuration.ApiClient.ParameterToString(parentPostId)); // path parameter
            if (replySize != null) localVarPathParams.Add("replySize", this.Configuration.ApiClient.ParameterToString(replySize)); // path parameter
            if (rootThreadMode != null) localVarPathParams.Add("rootThreadMode", this.Configuration.ApiClient.ParameterToString(rootThreadMode)); // path parameter
            if (sortMode != null) localVarPathParams.Add("sortMode", this.Configuration.ApiClient.ParameterToString(sortMode)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostsThreadedPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetPostsThreadedPagedFromChild (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = ForumGetPostsThreadedPagedFromChildWithHttpInfo(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> ForumGetPostsThreadedPagedFromChildWithHttpInfo (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'replySize' is set
            if (replySize == null)
                throw new ApiException(400, "Missing required parameter 'replySize' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'rootThreadMode' is set
            if (rootThreadMode == null)
                throw new ApiException(400, "Missing required parameter 'rootThreadMode' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'sortMode' is set
            if (sortMode == null)
                throw new ApiException(400, "Missing required parameter 'sortMode' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");

            var localVarPath = "/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", this.Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (replySize != null) localVarPathParams.Add("replySize", this.Configuration.ApiClient.ParameterToString(replySize)); // path parameter
            if (rootThreadMode != null) localVarPathParams.Add("rootThreadMode", this.Configuration.ApiClient.ParameterToString(rootThreadMode)); // path parameter
            if (sortMode != null) localVarPathParams.Add("sortMode", this.Configuration.ApiClient.ParameterToString(sortMode)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostsThreadedPagedFromChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetPostsThreadedPagedFromChildAsync (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = await ForumGetPostsThreadedPagedFromChildAsyncWithHttpInfo(childPostId, page, pageSize, replySize, rootThreadMode, sortMode, showbanned);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a thread of posts starting at the topicId of the input childPostId, optionally returning replies to those posts as well as the original parent.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="childPostId"></param>
        /// <param name="page"></param>
        /// <param name="pageSize"></param>
        /// <param name="replySize"></param>
        /// <param name="rootThreadMode"></param>
        /// <param name="sortMode"></param>
        /// <param name="showbanned">If this value is not null or empty, banned posts are requested to be returned (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetPostsThreadedPagedFromChildAsyncWithHttpInfo (long childPostId, int page, int pageSize, int replySize, bool rootThreadMode, int sortMode, string showbanned = default(string))
        {
            // verify the required parameter 'childPostId' is set
            if (childPostId == null)
                throw new ApiException(400, "Missing required parameter 'childPostId' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'replySize' is set
            if (replySize == null)
                throw new ApiException(400, "Missing required parameter 'replySize' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'rootThreadMode' is set
            if (rootThreadMode == null)
                throw new ApiException(400, "Missing required parameter 'rootThreadMode' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");
            // verify the required parameter 'sortMode' is set
            if (sortMode == null)
                throw new ApiException(400, "Missing required parameter 'sortMode' when calling ForumApi->ForumGetPostsThreadedPagedFromChild");

            var localVarPath = "/Forum/GetPostsThreadedPagedFromChild/{childPostId}/{page}/{pageSize}/{replySize}/{rootThreadMode}/{sortMode}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (childPostId != null) localVarPathParams.Add("childPostId", this.Configuration.ApiClient.ParameterToString(childPostId)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (replySize != null) localVarPathParams.Add("replySize", this.Configuration.ApiClient.ParameterToString(replySize)); // path parameter
            if (rootThreadMode != null) localVarPathParams.Add("rootThreadMode", this.Configuration.ApiClient.ParameterToString(rootThreadMode)); // path parameter
            if (sortMode != null) localVarPathParams.Add("sortMode", this.Configuration.ApiClient.ParameterToString(sortMode)); // path parameter
            if (showbanned != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "showbanned", showbanned)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetPostsThreadedPagedFromChild", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 ForumGetRecruitmentThreadSummaries ()
        {
             ApiResponse<InlineResponse20014> localVarResponse = ForumGetRecruitmentThreadSummariesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse<InlineResponse20014> ForumGetRecruitmentThreadSummariesWithHttpInfo ()
        {

            var localVarPath = "/Forum/Recruit/Summaries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetRecruitmentThreadSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> ForumGetRecruitmentThreadSummariesAsync ()
        {
             ApiResponse<InlineResponse20014> localVarResponse = await ForumGetRecruitmentThreadSummariesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Allows the caller to get a list of to 25 recruitment thread summary information objects.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> ForumGetRecruitmentThreadSummariesAsyncWithHttpInfo ()
        {

            var localVarPath = "/Forum/Recruit/Summaries/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetRecruitmentThreadSummaries", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 ForumGetTopicForContent (long contentId)
        {
             ApiResponse<InlineResponse20012> localVarResponse = ForumGetTopicForContentWithHttpInfo(contentId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse<InlineResponse20012> ForumGetTopicForContentWithHttpInfo (long contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ForumApi->ForumGetTopicForContent");

            var localVarPath = "/Forum/GetTopicForContent/{contentId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetTopicForContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> ForumGetTopicForContentAsync (long contentId)
        {
             ApiResponse<InlineResponse20012> localVarResponse = await ForumGetTopicForContentAsyncWithHttpInfo(contentId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets the post Id for the given content item&#39;s comments, if it exists.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="contentId"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> ForumGetTopicForContentAsyncWithHttpInfo (long contentId)
        {
            // verify the required parameter 'contentId' is set
            if (contentId == null)
                throw new ApiException(400, "Missing required parameter 'contentId' when calling ForumApi->ForumGetTopicForContent");

            var localVarPath = "/Forum/GetTopicForContent/{contentId}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (contentId != null) localVarPathParams.Add("contentId", this.Configuration.ApiClient.ParameterToString(contentId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetTopicForContent", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>InlineResponse20011</returns>
        public InlineResponse20011 ForumGetTopicsPaged (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = ForumGetTopicsPagedWithHttpInfo(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20011</returns>
        public ApiResponse<InlineResponse20011> ForumGetTopicsPagedWithHttpInfo (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string))
        {
            // verify the required parameter 'categoryFilter' is set
            if (categoryFilter == null)
                throw new ApiException(400, "Missing required parameter 'categoryFilter' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'quickDate' is set
            if (quickDate == null)
                throw new ApiException(400, "Missing required parameter 'quickDate' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ForumApi->ForumGetTopicsPaged");

            var localVarPath = "/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryFilter != null) localVarPathParams.Add("categoryFilter", this.Configuration.ApiClient.ParameterToString(categoryFilter)); // path parameter
            if (group != null) localVarPathParams.Add("group", this.Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (quickDate != null) localVarPathParams.Add("quickDate", this.Configuration.ApiClient.ParameterToString(quickDate)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", this.Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locales", locales)); // query parameter
            if (tagstring != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagstring", tagstring)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetTopicsPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of InlineResponse20011</returns>
        public async System.Threading.Tasks.Task<InlineResponse20011> ForumGetTopicsPagedAsync (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string))
        {
             ApiResponse<InlineResponse20011> localVarResponse = await ForumGetTopicsPagedAsyncWithHttpInfo(categoryFilter, group, page, pageSize, quickDate, sort, locales, tagstring);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get topics from any forum.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryFilter">A category filter</param>
        /// <param name="group">The group, if any.</param>
        /// <param name="page">Zero paged page number</param>
        /// <param name="pageSize">Unused</param>
        /// <param name="quickDate">A date filter.</param>
        /// <param name="sort">The sort mode.</param>
        /// <param name="locales">Comma seperated list of locales posts must match to return in the result list. Default &#39;en&#39; (optional)</param>
        /// <param name="tagstring">The tags to search, if any. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20011)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20011>> ForumGetTopicsPagedAsyncWithHttpInfo (int categoryFilter, long group, int page, int pageSize, int quickDate, int sort, string locales = default(string), string tagstring = default(string))
        {
            // verify the required parameter 'categoryFilter' is set
            if (categoryFilter == null)
                throw new ApiException(400, "Missing required parameter 'categoryFilter' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'group' is set
            if (group == null)
                throw new ApiException(400, "Missing required parameter 'group' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'page' is set
            if (page == null)
                throw new ApiException(400, "Missing required parameter 'page' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'pageSize' is set
            if (pageSize == null)
                throw new ApiException(400, "Missing required parameter 'pageSize' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'quickDate' is set
            if (quickDate == null)
                throw new ApiException(400, "Missing required parameter 'quickDate' when calling ForumApi->ForumGetTopicsPaged");
            // verify the required parameter 'sort' is set
            if (sort == null)
                throw new ApiException(400, "Missing required parameter 'sort' when calling ForumApi->ForumGetTopicsPaged");

            var localVarPath = "/Forum/GetTopicsPaged/{page}/{pageSize}/{group}/{sort}/{quickDate}/{categoryFilter}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (categoryFilter != null) localVarPathParams.Add("categoryFilter", this.Configuration.ApiClient.ParameterToString(categoryFilter)); // path parameter
            if (group != null) localVarPathParams.Add("group", this.Configuration.ApiClient.ParameterToString(group)); // path parameter
            if (page != null) localVarPathParams.Add("page", this.Configuration.ApiClient.ParameterToString(page)); // path parameter
            if (pageSize != null) localVarPathParams.Add("pageSize", this.Configuration.ApiClient.ParameterToString(pageSize)); // path parameter
            if (quickDate != null) localVarPathParams.Add("quickDate", this.Configuration.ApiClient.ParameterToString(quickDate)); // path parameter
            if (sort != null) localVarPathParams.Add("sort", this.Configuration.ApiClient.ParameterToString(sort)); // path parameter
            if (locales != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "locales", locales)); // query parameter
            if (tagstring != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "tagstring", tagstring)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ForumGetTopicsPaged", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20011>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse20011) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20011)));
        }

    }
}
