/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using BungieNetApi.Client;
using BungieNetApi.Api;
using BungieNetApi.Model;

namespace BungieNetApi.Test
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests
    {
        private UserApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new UserApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' UserApi
            //Assert.IsInstanceOf(typeof(UserApi), instance);
        }

        
        /// <summary>
        /// Test UserGetAvailableThemes
        /// </summary>
        [Test]
        public void UserGetAvailableThemesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserGetAvailableThemes();
            //Assert.IsInstanceOf(typeof(InlineResponse2004), response, "response is InlineResponse2004");
        }
        
        /// <summary>
        /// Test UserGetBungieNetUserById
        /// </summary>
        [Test]
        public void UserGetBungieNetUserByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long id = null;
            //var response = instance.UserGetBungieNetUserById(id);
            //Assert.IsInstanceOf(typeof(InlineResponse2002), response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test UserGetMembershipDataById
        /// </summary>
        [Test]
        public void UserGetMembershipDataByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long membershipId = null;
            //int membershipType = null;
            //var response = instance.UserGetMembershipDataById(membershipId, membershipType);
            //Assert.IsInstanceOf(typeof(InlineResponse2005), response, "response is InlineResponse2005");
        }
        
        /// <summary>
        /// Test UserGetMembershipDataForCurrentUser
        /// </summary>
        [Test]
        public void UserGetMembershipDataForCurrentUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserGetMembershipDataForCurrentUser();
            //Assert.IsInstanceOf(typeof(InlineResponse2005), response, "response is InlineResponse2005");
        }
        
        /// <summary>
        /// Test UserGetMembershipFromHardLinkedCredential
        /// </summary>
        [Test]
        public void UserGetMembershipFromHardLinkedCredentialTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string credential = null;
            //int crType = null;
            //var response = instance.UserGetMembershipFromHardLinkedCredential(credential, crType);
            //Assert.IsInstanceOf(typeof(InlineResponse2006), response, "response is InlineResponse2006");
        }
        
        /// <summary>
        /// Test UserSearchUsers
        /// </summary>
        [Test]
        public void UserSearchUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.UserSearchUsers(q);
            //Assert.IsInstanceOf(typeof(InlineResponse2003), response, "response is InlineResponse2003");
        }
        
    }

}
