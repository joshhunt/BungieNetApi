/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BungieNetApi.Client;
using BungieNetApi.Model;

namespace BungieNetApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">ID of the application to get usage statistics.</param>
        /// <param name="end">End time for query. Goes to now if not specified. (optional)</param>
        /// <param name="start">Start time for query. Goes to 24 hours ago if not specified. (optional)</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 AppGetApplicationApiUsage (int applicationId, DateTime? end = default(DateTime?), DateTime? start = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">ID of the application to get usage statistics.</param>
        /// <param name="end">End time for query. Goes to now if not specified. (optional)</param>
        /// <param name="start">Start time for query. Goes to 24 hours ago if not specified. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> AppGetApplicationApiUsageWithHttpInfo (int applicationId, DateTime? end = default(DateTime?), DateTime? start = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of applications created by Bungie.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 AppGetBungieApplications ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of applications created by Bungie.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> AppGetBungieApplicationsWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">ID of the application to get usage statistics.</param>
        /// <param name="end">End time for query. Goes to now if not specified. (optional)</param>
        /// <param name="start">Start time for query. Goes to 24 hours ago if not specified. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> AppGetApplicationApiUsageAsync (int applicationId, DateTime? end = default(DateTime?), DateTime? start = default(DateTime?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">ID of the application to get usage statistics.</param>
        /// <param name="end">End time for query. Goes to now if not specified. (optional)</param>
        /// <param name="start">Start time for query. Goes to 24 hours ago if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> AppGetApplicationApiUsageAsyncWithHttpInfo (int applicationId, DateTime? end = default(DateTime?), DateTime? start = default(DateTime?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of applications created by Bungie.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> AppGetBungieApplicationsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get list of applications created by Bungie.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> AppGetBungieApplicationsAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAppApi : IAppApiSync, IAppApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AppApi : IAppApi
    {
        private BungieNetApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AppApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AppApi(String basePath)
        {
            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                new BungieNetApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AppApi(BungieNetApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AppApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AppApi(BungieNetApi.Client.ISynchronousClient client,BungieNetApi.Client.IAsynchronousClient asyncClient, BungieNetApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BungieNetApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BungieNetApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BungieNetApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">ID of the application to get usage statistics.</param>
        /// <param name="end">End time for query. Goes to now if not specified. (optional)</param>
        /// <param name="start">Start time for query. Goes to 24 hours ago if not specified. (optional)</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 AppGetApplicationApiUsage (int applicationId, DateTime? end = default(DateTime?), DateTime? start = default(DateTime?))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse200> localVarResponse = AppGetApplicationApiUsageWithHttpInfo(applicationId, end, start);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">ID of the application to get usage statistics.</param>
        /// <param name="end">End time for query. Goes to now if not specified. (optional)</param>
        /// <param name="start">Start time for query. Goes to 24 hours ago if not specified. (optional)</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse200 > AppGetApplicationApiUsageWithHttpInfo (int applicationId, DateTime? end = default(DateTime?), DateTime? start = default(DateTime?))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("applicationId", BungieNetApi.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse200 >("/App/ApiUsage/{applicationId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppGetApplicationApiUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">ID of the application to get usage statistics.</param>
        /// <param name="end">End time for query. Goes to now if not specified. (optional)</param>
        /// <param name="start">Start time for query. Goes to 24 hours ago if not specified. (optional)</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> AppGetApplicationApiUsageAsync (int applicationId, DateTime? end = default(DateTime?), DateTime? start = default(DateTime?))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse200> localVarResponse = await AppGetApplicationApiUsageAsyncWithHttpInfo(applicationId, end, start);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get API usage by application for time frame specified. You can go as far back as 30 days ago, and can ask for up to a 48 hour window of time in a single request. You must be authenticated with at least the ReadUserData permission to access this endpoint.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="applicationId">ID of the application to get usage statistics.</param>
        /// <param name="end">End time for query. Goes to now if not specified. (optional)</param>
        /// <param name="start">Start time for query. Goes to 24 hours ago if not specified. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse200>> AppGetApplicationApiUsageAsyncWithHttpInfo (int applicationId, DateTime? end = default(DateTime?), DateTime? start = default(DateTime?))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("applicationId", BungieNetApi.Client.ClientUtils.ParameterToString(applicationId)); // path parameter
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse200>("/App/ApiUsage/{applicationId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppGetApplicationApiUsage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get list of applications created by Bungie.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 AppGetBungieApplications ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2001> localVarResponse = AppGetBungieApplicationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get list of applications created by Bungie.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse2001 > AppGetBungieApplicationsWithHttpInfo ()
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2001 >("/App/FirstParty/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppGetBungieApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Get list of applications created by Bungie.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> AppGetBungieApplicationsAsync ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2001> localVarResponse = await AppGetBungieApplicationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get list of applications created by Bungie.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse2001>> AppGetBungieApplicationsAsyncWithHttpInfo ()
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2001>("/App/FirstParty/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AppGetBungieApplications", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
