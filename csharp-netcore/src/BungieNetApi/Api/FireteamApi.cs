/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BungieNetApi.Client;
using BungieNetApi.Model;

namespace BungieNetApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFireteamApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>InlineResponse20022</returns>
        InlineResponse20022 FireteamGetActivePrivateClanFireteamCount (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        ApiResponse<InlineResponse20022> FireteamGetActivePrivateClanFireteamCountWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20064</returns>
        InlineResponse20064 FireteamGetAvailableClanFireteams (int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, string langFilter = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        ApiResponse<InlineResponse20064> FireteamGetAvailableClanFireteamsWithHttpInfo (int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, string langFilter = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific clan fireteam.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>InlineResponse20066</returns>
        InlineResponse20066 FireteamGetClanFireteam (long fireteamId, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific clan fireteam.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>ApiResponse of InlineResponse20066</returns>
        ApiResponse<InlineResponse20066> FireteamGetClanFireteamWithHttpInfo (long fireteamId, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        InlineResponse20065 FireteamGetMyClanFireteams (long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string langFilter = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        ApiResponse<InlineResponse20065> FireteamGetMyClanFireteamsWithHttpInfo (long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string langFilter = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20064</returns>
        InlineResponse20064 FireteamSearchPublicAvailableClanFireteams (int activityType, int dateRange, int page, int platform, int slotFilter, string langFilter = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        ApiResponse<InlineResponse20064> FireteamSearchPublicAvailableClanFireteamsWithHttpInfo (int activityType, int dateRange, int page, int platform, int slotFilter, string langFilter = default(string));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFireteamApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of InlineResponse20022</returns>
        System.Threading.Tasks.Task<InlineResponse20022> FireteamGetActivePrivateClanFireteamCountAsync (long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20022>> FireteamGetActivePrivateClanFireteamCountAsyncWithHttpInfo (long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20064</returns>
        System.Threading.Tasks.Task<InlineResponse20064> FireteamGetAvailableClanFireteamsAsync (int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, string langFilter = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> FireteamGetAvailableClanFireteamsAsyncWithHttpInfo (int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, string langFilter = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific clan fireteam.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of InlineResponse20066</returns>
        System.Threading.Tasks.Task<InlineResponse20066> FireteamGetClanFireteamAsync (long fireteamId, long groupId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a specific clan fireteam.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20066)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20066>> FireteamGetClanFireteamAsyncWithHttpInfo (long fireteamId, long groupId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20065</returns>
        System.Threading.Tasks.Task<InlineResponse20065> FireteamGetMyClanFireteamsAsync (long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string langFilter = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20065>> FireteamGetMyClanFireteamsAsyncWithHttpInfo (long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string langFilter = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20064</returns>
        System.Threading.Tasks.Task<InlineResponse20064> FireteamSearchPublicAvailableClanFireteamsAsync (int activityType, int dateRange, int page, int platform, int slotFilter, string langFilter = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20064>> FireteamSearchPublicAvailableClanFireteamsAsyncWithHttpInfo (int activityType, int dateRange, int page, int platform, int slotFilter, string langFilter = default(string));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFireteamApi : IFireteamApiSync, IFireteamApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FireteamApi : IFireteamApi
    {
        private BungieNetApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FireteamApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FireteamApi(String basePath)
        {
            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                new BungieNetApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FireteamApi(BungieNetApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FireteamApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FireteamApi(BungieNetApi.Client.ISynchronousClient client,BungieNetApi.Client.IAsynchronousClient asyncClient, BungieNetApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BungieNetApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BungieNetApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BungieNetApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>InlineResponse20022</returns>
        public InlineResponse20022 FireteamGetActivePrivateClanFireteamCount (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = FireteamGetActivePrivateClanFireteamCountWithHttpInfo(groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>ApiResponse of InlineResponse20022</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20022 > FireteamGetActivePrivateClanFireteamCountWithHttpInfo (long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20022 >("/Fireteam/Clan/{groupId}/ActiveCount/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetActivePrivateClanFireteamCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of InlineResponse20022</returns>
        public async System.Threading.Tasks.Task<InlineResponse20022> FireteamGetActivePrivateClanFireteamCountAsync (long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20022> localVarResponse = await FireteamGetActivePrivateClanFireteamCountAsyncWithHttpInfo(groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a count of all active non-public fireteams for the specified clan. Maximum value returned is 25.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20022)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20022>> FireteamGetActivePrivateClanFireteamCountAsyncWithHttpInfo (long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20022>("/Fireteam/Clan/{groupId}/ActiveCount/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetActivePrivateClanFireteamCount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20064</returns>
        public InlineResponse20064 FireteamGetAvailableClanFireteams (int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, string langFilter = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20064> localVarResponse = FireteamGetAvailableClanFireteamsWithHttpInfo(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, langFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20064 > FireteamGetAvailableClanFireteamsWithHttpInfo (int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, string langFilter = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("activityType", BungieNetApi.Client.ClientUtils.ParameterToString(activityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateRange", BungieNetApi.Client.ClientUtils.ParameterToString(dateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", BungieNetApi.Client.ClientUtils.ParameterToString(platform)); // path parameter
            localVarRequestOptions.PathParameters.Add("publicOnly", BungieNetApi.Client.ClientUtils.ParameterToString(publicOnly)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotFilter", BungieNetApi.Client.ClientUtils.ParameterToString(slotFilter)); // path parameter
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20064 >("/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetAvailableClanFireteams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20064</returns>
        public async System.Threading.Tasks.Task<InlineResponse20064> FireteamGetAvailableClanFireteamsAsync (int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, string langFilter = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20064> localVarResponse = await FireteamGetAvailableClanFireteamsAsyncWithHttpInfo(activityType, dateRange, groupId, page, platform, publicOnly, slotFilter, langFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a listing of all of this clan&#39;s fireteams that are have available slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="publicOnly">Determines public/private filtering.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20064>> FireteamGetAvailableClanFireteamsAsyncWithHttpInfo (int activityType, int dateRange, long groupId, int page, int platform, int publicOnly, int slotFilter, string langFilter = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("activityType", BungieNetApi.Client.ClientUtils.ParameterToString(activityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateRange", BungieNetApi.Client.ClientUtils.ParameterToString(dateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", BungieNetApi.Client.ClientUtils.ParameterToString(platform)); // path parameter
            localVarRequestOptions.PathParameters.Add("publicOnly", BungieNetApi.Client.ClientUtils.ParameterToString(publicOnly)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotFilter", BungieNetApi.Client.ClientUtils.ParameterToString(slotFilter)); // path parameter
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20064>("/Fireteam/Clan/{groupId}/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{publicOnly}/{page}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetAvailableClanFireteams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a specific clan fireteam.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>InlineResponse20066</returns>
        public InlineResponse20066 FireteamGetClanFireteam (long fireteamId, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20066> localVarResponse = FireteamGetClanFireteamWithHttpInfo(fireteamId, groupId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a specific clan fireteam.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>ApiResponse of InlineResponse20066</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20066 > FireteamGetClanFireteamWithHttpInfo (long fireteamId, long groupId)
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("fireteamId", BungieNetApi.Client.ClientUtils.ParameterToString(fireteamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20066 >("/Fireteam/Clan/{groupId}/Summary/{fireteamId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetClanFireteam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a specific clan fireteam.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of InlineResponse20066</returns>
        public async System.Threading.Tasks.Task<InlineResponse20066> FireteamGetClanFireteamAsync (long fireteamId, long groupId)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20066> localVarResponse = await FireteamGetClanFireteamAsyncWithHttpInfo(fireteamId, groupId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a specific clan fireteam.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fireteamId">The unique id of the fireteam.</param>
        /// <param name="groupId">The group id of the clan.</param>
        /// <returns>Task of ApiResponse (InlineResponse20066)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20066>> FireteamGetClanFireteamAsyncWithHttpInfo (long fireteamId, long groupId)
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("fireteamId", BungieNetApi.Client.ClientUtils.ParameterToString(fireteamId)); // path parameter
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20066>("/Fireteam/Clan/{groupId}/Summary/{fireteamId}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetClanFireteam", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20065</returns>
        public InlineResponse20065 FireteamGetMyClanFireteams (long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string langFilter = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20065> localVarResponse = FireteamGetMyClanFireteamsWithHttpInfo(groupId, includeClosed, page, platform, groupFilter, langFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20065</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20065 > FireteamGetMyClanFireteamsWithHttpInfo (long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string langFilter = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("includeClosed", BungieNetApi.Client.ClientUtils.ParameterToString(includeClosed)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", BungieNetApi.Client.ClientUtils.ParameterToString(platform)); // path parameter
            if (groupFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "groupFilter", groupFilter));
            }
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20065 >("/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetMyClanFireteams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20065</returns>
        public async System.Threading.Tasks.Task<InlineResponse20065> FireteamGetMyClanFireteamsAsync (long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string langFilter = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20065> localVarResponse = await FireteamGetMyClanFireteamsAsyncWithHttpInfo(groupId, includeClosed, page, platform, groupFilter, langFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a listing of all clan fireteams that caller is an applicant, a member, or an alternate of.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groupId">The group id of the clan. (This parameter is ignored unless the optional query parameter groupFilter is true).</param>
        /// <param name="includeClosed">If true, return fireteams that have been closed.</param>
        /// <param name="page">Deprecated parameter, ignored.</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="groupFilter">If true, filter by clan. Otherwise, ignore the clan and show all of the user&#39;s fireteams. (optional)</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20065)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20065>> FireteamGetMyClanFireteamsAsyncWithHttpInfo (long groupId, bool includeClosed, int page, int platform, bool? groupFilter = default(bool?), string langFilter = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("groupId", BungieNetApi.Client.ClientUtils.ParameterToString(groupId)); // path parameter
            localVarRequestOptions.PathParameters.Add("includeClosed", BungieNetApi.Client.ClientUtils.ParameterToString(includeClosed)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", BungieNetApi.Client.ClientUtils.ParameterToString(platform)); // path parameter
            if (groupFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "groupFilter", groupFilter));
            }
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20065>("/Fireteam/Clan/{groupId}/My/{platform}/{includeClosed}/{page}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamGetMyClanFireteams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>InlineResponse20064</returns>
        public InlineResponse20064 FireteamSearchPublicAvailableClanFireteams (int activityType, int dateRange, int page, int platform, int slotFilter, string langFilter = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20064> localVarResponse = FireteamSearchPublicAvailableClanFireteamsWithHttpInfo(activityType, dateRange, page, platform, slotFilter, langFilter);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>ApiResponse of InlineResponse20064</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20064 > FireteamSearchPublicAvailableClanFireteamsWithHttpInfo (int activityType, int dateRange, int page, int platform, int slotFilter, string langFilter = default(string))
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("activityType", BungieNetApi.Client.ClientUtils.ParameterToString(activityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateRange", BungieNetApi.Client.ClientUtils.ParameterToString(dateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", BungieNetApi.Client.ClientUtils.ParameterToString(platform)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotFilter", BungieNetApi.Client.ClientUtils.ParameterToString(slotFilter)); // path parameter
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20064 >("/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamSearchPublicAvailableClanFireteams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of InlineResponse20064</returns>
        public async System.Threading.Tasks.Task<InlineResponse20064> FireteamSearchPublicAvailableClanFireteamsAsync (int activityType, int dateRange, int page, int platform, int slotFilter, string langFilter = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20064> localVarResponse = await FireteamSearchPublicAvailableClanFireteamsAsyncWithHttpInfo(activityType, dateRange, page, platform, slotFilter, langFilter);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets a listing of all public fireteams starting now with open slots. Caller is not checked for join criteria so caching is maximized.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="activityType">The activity type to filter by.</param>
        /// <param name="dateRange">The date range to grab available fireteams.</param>
        /// <param name="page">Zero based page</param>
        /// <param name="platform">The platform filter.</param>
        /// <param name="slotFilter">Filters based on available slots</param>
        /// <param name="langFilter">An optional language filter. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20064)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20064>> FireteamSearchPublicAvailableClanFireteamsAsyncWithHttpInfo (int activityType, int dateRange, int page, int platform, int slotFilter, string langFilter = default(string))
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("activityType", BungieNetApi.Client.ClientUtils.ParameterToString(activityType)); // path parameter
            localVarRequestOptions.PathParameters.Add("dateRange", BungieNetApi.Client.ClientUtils.ParameterToString(dateRange)); // path parameter
            localVarRequestOptions.PathParameters.Add("page", BungieNetApi.Client.ClientUtils.ParameterToString(page)); // path parameter
            localVarRequestOptions.PathParameters.Add("platform", BungieNetApi.Client.ClientUtils.ParameterToString(platform)); // path parameter
            localVarRequestOptions.PathParameters.Add("slotFilter", BungieNetApi.Client.ClientUtils.ParameterToString(slotFilter)); // path parameter
            if (langFilter != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "langFilter", langFilter));
            }

            // authentication (oauth2) required
            // oauth required
            if (!String.IsNullOrEmpty(this.Configuration.AccessToken))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20064>("/Fireteam/Search/Available/{platform}/{activityType}/{dateRange}/{slotFilter}/{page}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("FireteamSearchPublicAvailableClanFireteams", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
