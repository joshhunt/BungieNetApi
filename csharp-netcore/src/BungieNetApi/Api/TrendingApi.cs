/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BungieNetApi.Client;
using BungieNetApi.Model;

namespace BungieNetApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrendingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20061</returns>
        InlineResponse20061 TrendingGetTrendingCategories ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20061</returns>
        ApiResponse<InlineResponse20061> TrendingGetTrendingCategoriesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns paginated lists of trending items for a category.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>InlineResponse20062</returns>
        InlineResponse20062 TrendingGetTrendingCategory (string categoryId, int pageNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns paginated lists of trending items for a category.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>ApiResponse of InlineResponse20062</returns>
        ApiResponse<InlineResponse20062> TrendingGetTrendingCategoryWithHttpInfo (string categoryId, int pageNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>InlineResponse20063</returns>
        InlineResponse20063 TrendingGetTrendingEntryDetail (string identifier, int trendingEntryType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>ApiResponse of InlineResponse20063</returns>
        ApiResponse<InlineResponse20063> TrendingGetTrendingEntryDetailWithHttpInfo (string identifier, int trendingEntryType);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrendingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20061</returns>
        System.Threading.Tasks.Task<InlineResponse20061> TrendingGetTrendingCategoriesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20061)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20061>> TrendingGetTrendingCategoriesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns paginated lists of trending items for a category.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>Task of InlineResponse20062</returns>
        System.Threading.Tasks.Task<InlineResponse20062> TrendingGetTrendingCategoryAsync (string categoryId, int pageNumber);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns paginated lists of trending items for a category.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>Task of ApiResponse (InlineResponse20062)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20062>> TrendingGetTrendingCategoryAsyncWithHttpInfo (string categoryId, int pageNumber);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>Task of InlineResponse20063</returns>
        System.Threading.Tasks.Task<InlineResponse20063> TrendingGetTrendingEntryDetailAsync (string identifier, int trendingEntryType);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20063)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20063>> TrendingGetTrendingEntryDetailAsyncWithHttpInfo (string identifier, int trendingEntryType);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITrendingApi : ITrendingApiSync, ITrendingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TrendingApi : ITrendingApi
    {
        private BungieNetApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TrendingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrendingApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrendingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TrendingApi(String basePath)
        {
            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                new BungieNetApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrendingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TrendingApi(BungieNetApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TrendingApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TrendingApi(BungieNetApi.Client.ISynchronousClient client,BungieNetApi.Client.IAsynchronousClient asyncClient, BungieNetApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BungieNetApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BungieNetApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BungieNetApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse20061</returns>
        public InlineResponse20061 TrendingGetTrendingCategories ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20061> localVarResponse = TrendingGetTrendingCategoriesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse20061</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20061 > TrendingGetTrendingCategoriesWithHttpInfo ()
        {
            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20061 >("/Trending/Categories/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrendingGetTrendingCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse20061</returns>
        public async System.Threading.Tasks.Task<InlineResponse20061> TrendingGetTrendingCategoriesAsync ()
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20061> localVarResponse = await TrendingGetTrendingCategoriesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns trending items for Bungie.net, collapsed into the first page of items per category. For pagination within a category, call GetTrendingCategory.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse20061)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20061>> TrendingGetTrendingCategoriesAsyncWithHttpInfo ()
        {

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20061>("/Trending/Categories/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrendingGetTrendingCategories", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns paginated lists of trending items for a category.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>InlineResponse20062</returns>
        public InlineResponse20062 TrendingGetTrendingCategory (string categoryId, int pageNumber)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20062> localVarResponse = TrendingGetTrendingCategoryWithHttpInfo(categoryId, pageNumber);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns paginated lists of trending items for a category.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>ApiResponse of InlineResponse20062</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20062 > TrendingGetTrendingCategoryWithHttpInfo (string categoryId, int pageNumber)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'categoryId' when calling TrendingApi->TrendingGetTrendingCategory");

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (categoryId != null)
                localVarRequestOptions.PathParameters.Add("categoryId", BungieNetApi.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageNumber", BungieNetApi.Client.ClientUtils.ParameterToString(pageNumber)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20062 >("/Trending/Categories/{categoryId}/{pageNumber}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrendingGetTrendingCategory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns paginated lists of trending items for a category.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>Task of InlineResponse20062</returns>
        public async System.Threading.Tasks.Task<InlineResponse20062> TrendingGetTrendingCategoryAsync (string categoryId, int pageNumber)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20062> localVarResponse = await TrendingGetTrendingCategoryAsyncWithHttpInfo(categoryId, pageNumber);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns paginated lists of trending items for a category.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="categoryId">The ID of the category for whom you want additional results.</param>
        /// <param name="pageNumber">The page # of results to return.</param>
        /// <returns>Task of ApiResponse (InlineResponse20062)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20062>> TrendingGetTrendingCategoryAsyncWithHttpInfo (string categoryId, int pageNumber)
        {
            // verify the required parameter 'categoryId' is set
            if (categoryId == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'categoryId' when calling TrendingApi->TrendingGetTrendingCategory");


            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (categoryId != null)
                localVarRequestOptions.PathParameters.Add("categoryId", BungieNetApi.Client.ClientUtils.ParameterToString(categoryId)); // path parameter
            localVarRequestOptions.PathParameters.Add("pageNumber", BungieNetApi.Client.ClientUtils.ParameterToString(pageNumber)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20062>("/Trending/Categories/{categoryId}/{pageNumber}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrendingGetTrendingCategory", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>InlineResponse20063</returns>
        public InlineResponse20063 TrendingGetTrendingEntryDetail (string identifier, int trendingEntryType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20063> localVarResponse = TrendingGetTrendingEntryDetailWithHttpInfo(identifier, trendingEntryType);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>ApiResponse of InlineResponse20063</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20063 > TrendingGetTrendingEntryDetailWithHttpInfo (string identifier, int trendingEntryType)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'identifier' when calling TrendingApi->TrendingGetTrendingEntryDetail");

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (identifier != null)
                localVarRequestOptions.PathParameters.Add("identifier", BungieNetApi.Client.ClientUtils.ParameterToString(identifier)); // path parameter
            localVarRequestOptions.PathParameters.Add("trendingEntryType", BungieNetApi.Client.ClientUtils.ParameterToString(trendingEntryType)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20063 >("/Trending/Details/{trendingEntryType}/{identifier}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrendingGetTrendingEntryDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>Task of InlineResponse20063</returns>
        public async System.Threading.Tasks.Task<InlineResponse20063> TrendingGetTrendingEntryDetailAsync (string identifier, int trendingEntryType)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20063> localVarResponse = await TrendingGetTrendingEntryDetailAsyncWithHttpInfo(identifier, trendingEntryType);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the detailed results for a specific trending entry. Note that trending entries are uniquely identified by a combination of *both* the TrendingEntryType *and* the identifier: the identifier alone is not guaranteed to be globally unique.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identifier">The identifier for the entity to be returned.</param>
        /// <param name="trendingEntryType">The type of entity to be returned.</param>
        /// <returns>Task of ApiResponse (InlineResponse20063)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20063>> TrendingGetTrendingEntryDetailAsyncWithHttpInfo (string identifier, int trendingEntryType)
        {
            // verify the required parameter 'identifier' is set
            if (identifier == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'identifier' when calling TrendingApi->TrendingGetTrendingEntryDetail");


            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (identifier != null)
                localVarRequestOptions.PathParameters.Add("identifier", BungieNetApi.Client.ClientUtils.ParameterToString(identifier)); // path parameter
            localVarRequestOptions.PathParameters.Add("trendingEntryType", BungieNetApi.Client.ClientUtils.ParameterToString(trendingEntryType)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20063>("/Trending/Details/{trendingEntryType}/{identifier}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TrendingGetTrendingEntryDetail", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
