/* 
 * Bungie.Net API
 *
 * These endpoints constitute the functionality exposed by Bungie.net, both for more traditional website functionality and for connectivity to Bungie video games and their related functionality.
 *
 * The version of the OpenAPI document: 2.8.0
 * Contact: support@bungie.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using BungieNetApi.Client;
using BungieNetApi.Model;

namespace BungieNetApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 ContentGetContentById (long id, string locale, bool? head = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> ContentGetContentByIdWithHttpInfo (long id, string locale, bool? head = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 ContentGetContentByTagAndType (string locale, string tag, string type, bool? head = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> ContentGetContentByTagAndTypeWithHttpInfo (string locale, string tag, string type, bool? head = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 ContentGetContentType (string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> ContentGetContentTypeWithHttpInfo (string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ContentSearchContentByTagAndType (string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ContentSearchContentByTagAndTypeWithHttpInfo (string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 ContentSearchContentWithText (string locale, string ctype = default(string), int? currentpage = default(int?), bool? head = default(bool?), string searchtext = default(string), string source = default(string), string tag = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> ContentSearchContentWithTextWithHttpInfo (string locale, string ctype = default(string), int? currentpage = default(int?), bool? head = default(bool?), string searchtext = default(string), string source = default(string), string tag = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Help Articles.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <returns>InlineResponse20010</returns>
        InlineResponse20010 ContentSearchHelpArticles (string searchtext, string size);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Help Articles.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        ApiResponse<InlineResponse20010> ContentSearchHelpArticlesWithHttpInfo (string searchtext, string size);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> ContentGetContentByIdAsync (long id, string locale, bool? head = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns a content item referenced by id
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> ContentGetContentByIdAsyncWithHttpInfo (long id, string locale, bool? head = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> ContentGetContentByTagAndTypeAsync (string locale, string tag, string type, bool? head = default(bool?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Returns the newest item that matches a given tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> ContentGetContentByTagAndTypeAsyncWithHttpInfo (string locale, string tag, string type, bool? head = default(bool?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> ContentGetContentTypeAsync (string type);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets an object describing a particular variant of content.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> ContentGetContentTypeAsyncWithHttpInfo (string type);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ContentSearchContentByTagAndTypeAsync (string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Searches for Content Items that match the given Tag and Content Type.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ContentSearchContentByTagAndTypeAsyncWithHttpInfo (string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> ContentSearchContentWithTextAsync (string locale, string ctype = default(string), int? currentpage = default(int?), bool? head = default(bool?), string searchtext = default(string), string source = default(string), string tag = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> ContentSearchContentWithTextAsyncWithHttpInfo (string locale, string ctype = default(string), int? currentpage = default(int?), bool? head = default(bool?), string searchtext = default(string), string source = default(string), string tag = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Help Articles.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <returns>Task of InlineResponse20010</returns>
        System.Threading.Tasks.Task<InlineResponse20010> ContentSearchHelpArticlesAsync (string searchtext, string size);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for Help Articles.
        /// </remarks>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20010>> ContentSearchHelpArticlesAsyncWithHttpInfo (string searchtext, string size);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IContentApi : IContentApiSync, IContentApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ContentApi : IContentApi
    {
        private BungieNetApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ContentApi(String basePath)
        {
            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                new BungieNetApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ContentApi(BungieNetApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = BungieNetApi.Client.Configuration.MergeConfigurations(
                BungieNetApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new BungieNetApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ContentApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ContentApi(BungieNetApi.Client.ISynchronousClient client,BungieNetApi.Client.IAsynchronousClient asyncClient, BungieNetApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = BungieNetApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public BungieNetApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public BungieNetApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public BungieNetApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public BungieNetApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 ContentGetContentById (long id, string locale, bool? head = default(bool?))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2008> localVarResponse = ContentGetContentByIdWithHttpInfo(id, locale, head);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse2008 > ContentGetContentByIdWithHttpInfo (long id, string locale, bool? head = default(bool?))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentById");

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", BungieNetApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (locale != null)
                localVarRequestOptions.PathParameters.Add("locale", BungieNetApi.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2008 >("/Content/GetContentById/{id}/{locale}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> ContentGetContentByIdAsync (long id, string locale, bool? head = default(bool?))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2008> localVarResponse = await ContentGetContentByIdAsyncWithHttpInfo(id, locale, head);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns a content item referenced by id
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="locale"></param>
        /// <param name="head">false (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse2008>> ContentGetContentByIdAsyncWithHttpInfo (long id, string locale, bool? head = default(bool?))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentById");


            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("id", BungieNetApi.Client.ClientUtils.ParameterToString(id)); // path parameter
            if (locale != null)
                localVarRequestOptions.PathParameters.Add("locale", BungieNetApi.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/Content/GetContentById/{id}/{locale}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentById", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 ContentGetContentByTagAndType (string locale, string tag, string type, bool? head = default(bool?))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2008> localVarResponse = ContentGetContentByTagAndTypeWithHttpInfo(locale, tag, type, head);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse2008 > ContentGetContentByTagAndTypeWithHttpInfo (string locale, string tag, string type, bool? head = default(bool?))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentByTagAndType");

            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentGetContentByTagAndType");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentByTagAndType");

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (locale != null)
                localVarRequestOptions.PathParameters.Add("locale", BungieNetApi.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", BungieNetApi.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (type != null)
                localVarRequestOptions.PathParameters.Add("type", BungieNetApi.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2008 >("/Content/GetContentByTagAndType/{tag}/{type}/{locale}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentByTagAndType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> ContentGetContentByTagAndTypeAsync (string locale, string tag, string type, bool? head = default(bool?))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2008> localVarResponse = await ContentGetContentByTagAndTypeAsyncWithHttpInfo(locale, tag, type, head);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Returns the newest item that matches a given tag and Content Type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="head">Not used. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse2008>> ContentGetContentByTagAndTypeAsyncWithHttpInfo (string locale, string tag, string type, bool? head = default(bool?))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentGetContentByTagAndType");

            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentGetContentByTagAndType");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentByTagAndType");


            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (locale != null)
                localVarRequestOptions.PathParameters.Add("locale", BungieNetApi.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", BungieNetApi.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (type != null)
                localVarRequestOptions.PathParameters.Add("type", BungieNetApi.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2008>("/Content/GetContentByTagAndType/{tag}/{type}/{locale}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentByTagAndType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 ContentGetContentType (string type)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2007> localVarResponse = ContentGetContentTypeWithHttpInfo(type);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse2007 > ContentGetContentTypeWithHttpInfo (string type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentType");

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
                localVarRequestOptions.PathParameters.Add("type", BungieNetApi.Client.ClientUtils.ParameterToString(type)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2007 >("/Content/GetContentType/{type}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> ContentGetContentTypeAsync (string type)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2007> localVarResponse = await ContentGetContentTypeAsyncWithHttpInfo(type);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets an object describing a particular variant of content.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type"></param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse2007>> ContentGetContentTypeAsyncWithHttpInfo (string type)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentGetContentType");


            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (type != null)
                localVarRequestOptions.PathParameters.Add("type", BungieNetApi.Client.ClientUtils.ParameterToString(type)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/Content/GetContentType/{type}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentGetContentType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ContentSearchContentByTagAndType (string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2009> localVarResponse = ContentSearchContentByTagAndTypeWithHttpInfo(locale, tag, type, currentpage, head, itemsperpage);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse2009 > ContentSearchContentByTagAndTypeWithHttpInfo (string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentByTagAndType");

            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentSearchContentByTagAndType");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentSearchContentByTagAndType");

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (locale != null)
                localVarRequestOptions.PathParameters.Add("locale", BungieNetApi.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", BungieNetApi.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (type != null)
                localVarRequestOptions.PathParameters.Add("type", BungieNetApi.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (currentpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "currentpage", currentpage));
            }
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }
            if (itemsperpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "itemsperpage", itemsperpage));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2009 >("/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchContentByTagAndType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ContentSearchContentByTagAndTypeAsync (string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2009> localVarResponse = await ContentSearchContentByTagAndTypeAsyncWithHttpInfo(locale, tag, type, currentpage, head, itemsperpage);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Searches for Content Items that match the given Tag and Content Type.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="tag"></param>
        /// <param name="type"></param>
        /// <param name="currentpage">Page number for the search results starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="itemsperpage">Not used. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse2009>> ContentSearchContentByTagAndTypeAsyncWithHttpInfo (string locale, string tag, string type, int? currentpage = default(int?), bool? head = default(bool?), int? itemsperpage = default(int?))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentByTagAndType");

            // verify the required parameter 'tag' is set
            if (tag == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'tag' when calling ContentApi->ContentSearchContentByTagAndType");

            // verify the required parameter 'type' is set
            if (type == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'type' when calling ContentApi->ContentSearchContentByTagAndType");


            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (locale != null)
                localVarRequestOptions.PathParameters.Add("locale", BungieNetApi.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (tag != null)
                localVarRequestOptions.PathParameters.Add("tag", BungieNetApi.Client.ClientUtils.ParameterToString(tag)); // path parameter
            if (type != null)
                localVarRequestOptions.PathParameters.Add("type", BungieNetApi.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (currentpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "currentpage", currentpage));
            }
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }
            if (itemsperpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "itemsperpage", itemsperpage));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/Content/SearchContentByTagAndType/{tag}/{type}/{locale}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchContentByTagAndType", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 ContentSearchContentWithText (string locale, string ctype = default(string), int? currentpage = default(int?), bool? head = default(bool?), string searchtext = default(string), string source = default(string), string tag = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2009> localVarResponse = ContentSearchContentWithTextWithHttpInfo(locale, ctype, currentpage, head, searchtext, source, tag);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse2009 > ContentSearchContentWithTextWithHttpInfo (string locale, string ctype = default(string), int? currentpage = default(int?), bool? head = default(bool?), string searchtext = default(string), string source = default(string), string tag = default(string))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentWithText");

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (locale != null)
                localVarRequestOptions.PathParameters.Add("locale", BungieNetApi.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (ctype != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "ctype", ctype));
            }
            if (currentpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "currentpage", currentpage));
            }
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }
            if (searchtext != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "searchtext", searchtext));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse2009 >("/Content/Search/{locale}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchContentWithText", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> ContentSearchContentWithTextAsync (string locale, string ctype = default(string), int? currentpage = default(int?), bool? head = default(bool?), string searchtext = default(string), string source = default(string), string tag = default(string))
        {
             BungieNetApi.Client.ApiResponse<InlineResponse2009> localVarResponse = await ContentSearchContentWithTextAsyncWithHttpInfo(locale, ctype, currentpage, head, searchtext, source, tag);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets content based on querystring information passed in. Provides basic search and text search capabilities.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locale"></param>
        /// <param name="ctype">Content type tag: Help, News, etc. Supply multiple ctypes separated by space. (optional)</param>
        /// <param name="currentpage">Page number for the search results, starting with page 1. (optional)</param>
        /// <param name="head">Not used. (optional)</param>
        /// <param name="searchtext">Word or phrase for the search. (optional)</param>
        /// <param name="source">For analytics, hint at the part of the app that triggered the search. Optional. (optional)</param>
        /// <param name="tag">Tag used on the content to be searched. (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse2009>> ContentSearchContentWithTextAsyncWithHttpInfo (string locale, string ctype = default(string), int? currentpage = default(int?), bool? head = default(bool?), string searchtext = default(string), string source = default(string), string tag = default(string))
        {
            // verify the required parameter 'locale' is set
            if (locale == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'locale' when calling ContentApi->ContentSearchContentWithText");


            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (locale != null)
                localVarRequestOptions.PathParameters.Add("locale", BungieNetApi.Client.ClientUtils.ParameterToString(locale)); // path parameter
            if (ctype != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "ctype", ctype));
            }
            if (currentpage != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "currentpage", currentpage));
            }
            if (head != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "head", head));
            }
            if (searchtext != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "searchtext", searchtext));
            }
            if (source != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "source", source));
            }
            if (tag != null)
            {
                localVarRequestOptions.QueryParameters.Add(BungieNetApi.Client.ClientUtils.ParameterToMultiMap("", "tag", tag));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/Content/Search/{locale}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchContentWithText", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for Help Articles.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <returns>InlineResponse20010</returns>
        public InlineResponse20010 ContentSearchHelpArticles (string searchtext, string size)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20010> localVarResponse = ContentSearchHelpArticlesWithHttpInfo(searchtext, size);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for Help Articles.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <returns>ApiResponse of InlineResponse20010</returns>
        public BungieNetApi.Client.ApiResponse< InlineResponse20010 > ContentSearchHelpArticlesWithHttpInfo (string searchtext, string size)
        {
            // verify the required parameter 'searchtext' is set
            if (searchtext == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'searchtext' when calling ContentApi->ContentSearchHelpArticles");

            // verify the required parameter 'size' is set
            if (size == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'size' when calling ContentApi->ContentSearchHelpArticles");

            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };

            var localVarContentType = BungieNetApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = BungieNetApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (searchtext != null)
                localVarRequestOptions.PathParameters.Add("searchtext", BungieNetApi.Client.ClientUtils.ParameterToString(searchtext)); // path parameter
            if (size != null)
                localVarRequestOptions.PathParameters.Add("size", BungieNetApi.Client.ClientUtils.ParameterToString(size)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< InlineResponse20010 >("/Content/SearchHelpArticles/{searchtext}/{size}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchHelpArticles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        ///  Search for Help Articles.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <returns>Task of InlineResponse20010</returns>
        public async System.Threading.Tasks.Task<InlineResponse20010> ContentSearchHelpArticlesAsync (string searchtext, string size)
        {
             BungieNetApi.Client.ApiResponse<InlineResponse20010> localVarResponse = await ContentSearchHelpArticlesAsyncWithHttpInfo(searchtext, size);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for Help Articles.
        /// </summary>
        /// <exception cref="BungieNetApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchtext"></param>
        /// <param name="size"></param>
        /// <returns>Task of ApiResponse (InlineResponse20010)</returns>
        public async System.Threading.Tasks.Task<BungieNetApi.Client.ApiResponse<InlineResponse20010>> ContentSearchHelpArticlesAsyncWithHttpInfo (string searchtext, string size)
        {
            // verify the required parameter 'searchtext' is set
            if (searchtext == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'searchtext' when calling ContentApi->ContentSearchHelpArticles");

            // verify the required parameter 'size' is set
            if (size == null)
                throw new BungieNetApi.Client.ApiException(400, "Missing required parameter 'size' when calling ContentApi->ContentSearchHelpArticles");


            BungieNetApi.Client.RequestOptions localVarRequestOptions = new BungieNetApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "*/*"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (searchtext != null)
                localVarRequestOptions.PathParameters.Add("searchtext", BungieNetApi.Client.ClientUtils.ParameterToString(searchtext)); // path parameter
            if (size != null)
                localVarRequestOptions.PathParameters.Add("size", BungieNetApi.Client.ClientUtils.ParameterToString(size)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<InlineResponse20010>("/Content/SearchHelpArticles/{searchtext}/{size}/", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ContentSearchHelpArticles", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
