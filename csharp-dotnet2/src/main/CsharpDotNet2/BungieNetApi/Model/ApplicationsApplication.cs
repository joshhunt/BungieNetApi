using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace BungieNetApi.Model {

  /// <summary>
  /// 
  /// </summary>
  [DataContract]
  public class ApplicationsApplication {
    /// <summary>
    /// Gets or Sets ApplicationType
    /// </summary>
    [DataMember(Name="applicationType", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "applicationType")]
    public int? ApplicationType { get; set; }

    /// <summary>
    /// Unique ID assigned to the application
    /// </summary>
    /// <value>Unique ID assigned to the application</value>
    [DataMember(Name="applicationId", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "applicationId")]
    public int? ApplicationId { get; set; }

    /// <summary>
    /// Name of the application
    /// </summary>
    /// <value>Name of the application</value>
    [DataMember(Name="name", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "name")]
    public string Name { get; set; }

    /// <summary>
    /// URL used to pass the user's authorization code to the application
    /// </summary>
    /// <value>URL used to pass the user's authorization code to the application</value>
    [DataMember(Name="redirectUrl", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "redirectUrl")]
    public string RedirectUrl { get; set; }

    /// <summary>
    /// Link to website for the application where a user can learn more about the app.
    /// </summary>
    /// <value>Link to website for the application where a user can learn more about the app.</value>
    [DataMember(Name="link", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "link")]
    public string Link { get; set; }

    /// <summary>
    /// Permissions the application needs to work
    /// </summary>
    /// <value>Permissions the application needs to work</value>
    [DataMember(Name="scope", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "scope")]
    public long? Scope { get; set; }

    /// <summary>
    /// Value of the Origin header sent in requests generated by this application.
    /// </summary>
    /// <value>Value of the Origin header sent in requests generated by this application.</value>
    [DataMember(Name="origin", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "origin")]
    public string Origin { get; set; }

    /// <summary>
    /// Current status of the application.
    /// </summary>
    /// <value>Current status of the application.</value>
    [DataMember(Name="status", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "status")]
    public int? Status { get; set; }

    /// <summary>
    /// Date the application was first added to our database.
    /// </summary>
    /// <value>Date the application was first added to our database.</value>
    [DataMember(Name="creationDate", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "creationDate")]
    public DateTime? CreationDate { get; set; }

    /// <summary>
    /// Date the application status last changed.
    /// </summary>
    /// <value>Date the application status last changed.</value>
    [DataMember(Name="statusChanged", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "statusChanged")]
    public DateTime? StatusChanged { get; set; }

    /// <summary>
    /// Date the first time the application status entered the 'Public' status.
    /// </summary>
    /// <value>Date the first time the application status entered the 'Public' status.</value>
    [DataMember(Name="firstPublished", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "firstPublished")]
    public DateTime? FirstPublished { get; set; }

    /// <summary>
    /// List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.
    /// </summary>
    /// <value>List of team members who manage this application on Bungie.net. Will always consist of at least the application owner.</value>
    [DataMember(Name="team", EmitDefaultValue=false)]
    [JsonProperty(PropertyName = "team")]
    public List<ApplicationsApplicationDeveloper> Team { get; set; }


    /// <summary>
    /// Get the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()  {
      var sb = new StringBuilder();
      sb.Append("class ApplicationsApplication {\n");
      sb.Append("  ApplicationType: ").Append(ApplicationType).Append("\n");
      sb.Append("  ApplicationId: ").Append(ApplicationId).Append("\n");
      sb.Append("  Name: ").Append(Name).Append("\n");
      sb.Append("  RedirectUrl: ").Append(RedirectUrl).Append("\n");
      sb.Append("  Link: ").Append(Link).Append("\n");
      sb.Append("  Scope: ").Append(Scope).Append("\n");
      sb.Append("  Origin: ").Append(Origin).Append("\n");
      sb.Append("  Status: ").Append(Status).Append("\n");
      sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
      sb.Append("  StatusChanged: ").Append(StatusChanged).Append("\n");
      sb.Append("  FirstPublished: ").Append(FirstPublished).Append("\n");
      sb.Append("  Team: ").Append(Team).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Get the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson() {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

}
}
